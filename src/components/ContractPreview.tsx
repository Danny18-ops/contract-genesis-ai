
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Download, FileText, Loader2, Copy, Check } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import jsPDF from 'jspdf';

interface ContractPreviewProps {
  contract: string;
  isGenerating: boolean;
  contractData: any;
}

export const ContractPreview = ({ contract, isGenerating, contractData }: ContractPreviewProps) => {
  const [copied, setCopied] = useState(false);
  const [isDownloading, setIsDownloading] = useState(false);
  const { toast } = useToast();

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(contract);
      setCopied(true);
      toast({
        title: "Copied!",
        description: "Contract text copied to clipboard.",
      });
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Failed to copy contract to clipboard.",
        variant: "destructive"
      });
    }
  };

  const downloadAsPDF = async () => {
    if (!contract) return;
    
    setIsDownloading(true);
    
    try {
      const pdf = new jsPDF();
      const pageHeight = pdf.internal.pageSize.height;
      const pageWidth = pdf.internal.pageSize.width;
      const margin = 20;
      const lineHeight = 6;
      const maxLineWidth = pageWidth - (margin * 2);
      
      // Set font
      pdf.setFont('helvetica', 'normal');
      pdf.setFontSize(10);
      
      // Split contract into lines that fit the page width
      const lines = pdf.splitTextToSize(contract, maxLineWidth);
      
      let yPosition = margin;
      
      // Add title
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      const title = contractData?.contractType?.toUpperCase().replace(/([A-Z])/g, ' $1').trim() + ' CONTRACT' || 'LEGAL CONTRACT';
      pdf.text(title, pageWidth / 2, yPosition, { align: 'center' });
      
      yPosition += 15;
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      
      // Add lines to PDF
      for (let i = 0; i < lines.length; i++) {
        if (yPosition > pageHeight - margin) {
          pdf.addPage();
          yPosition = margin;
        }
        
        pdf.text(lines[i], margin, yPosition);
        yPosition += lineHeight;
      }
      
      // Add footer to each page
      const totalPages = pdf.getNumberOfPages();
      for (let i = 1; i <= totalPages; i++) {
        pdf.setPage(i);
        pdf.setFontSize(8);
        pdf.setTextColor(128, 128, 128);
        pdf.text(`Page ${i} of ${totalPages}`, pageWidth - margin, pageHeight - 10, { align: 'right' });
        pdf.text('Generated by GenContract AI', margin, pageHeight - 10);
      }
      
      // Generate filename
      const contractType = contractData?.contractType || 'contract';
      const timestamp = new Date().toISOString().split('T')[0];
      const filename = `${contractType}_${contractData?.party1Name || 'contract'}_${timestamp}.pdf`;
      
      // Save the PDF
      pdf.save(filename);
      
      toast({
        title: "PDF Downloaded!",
        description: "Your contract has been saved as a PDF file.",
      });
    } catch (error) {
      console.error('PDF generation error:', error);
      toast({
        title: "Download Failed",
        description: "Failed to generate PDF. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsDownloading(false);
    }
  };

  if (isGenerating) {
    return (
      <div className="flex flex-col items-center justify-center h-96 text-gray-500">
        <Loader2 className="w-12 h-12 animate-spin text-blue-600 mb-4" />
        <h3 className="text-lg font-semibold mb-2">Generating Your Professional Contract</h3>
        <p className="text-sm text-center max-w-sm">
          Our AI is crafting a comprehensive, legally sound contract with all necessary clauses and provisions. This may take a few moments...
        </p>
        <div className="mt-6 flex space-x-2">
          <div className="w-2 h-2 bg-blue-600 rounded-full animate-bounce"></div>
          <div className="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
          <div className="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
        </div>
      </div>
    );
  }

  if (!contract) {
    return (
      <div className="flex flex-col items-center justify-center h-96 text-gray-400">
        <FileText className="w-16 h-16 mb-4" />
        <h3 className="text-lg font-semibold mb-2">No Contract Generated</h3>
        <p className="text-sm text-center max-w-sm">
          Fill out the detailed form on the left and click "Generate Professional Contract" to create your comprehensive legal agreement.
        </p>
      </div>
    );
  }

  // Count pages (approximate)
  const estimatedPages = Math.ceil(contract.length / 3000);

  return (
    <div className="space-y-4">
      {/* Contract Stats */}
      <div className="flex justify-between items-center text-sm text-gray-600 bg-gray-50 p-3 rounded-lg">
        <span>Document Length: {contract.length.toLocaleString()} characters</span>
        <span>Estimated Pages: {estimatedPages}</span>
      </div>

      {/* Action Buttons */}
      <div className="flex gap-2 mb-4">
        <Button
          onClick={copyToClipboard}
          variant="outline"
          size="sm"
          className="flex-1"
          disabled={!contract}
        >
          {copied ? <Check className="w-4 h-4 mr-2" /> : <Copy className="w-4 h-4 mr-2" />}
          {copied ? 'Copied!' : 'Copy Text'}
        </Button>
        <Button
          onClick={downloadAsPDF}
          variant="default"
          size="sm"
          className="flex-1 bg-green-600 hover:bg-green-700"
          disabled={!contract || isDownloading}
        >
          {isDownloading ? (
            <Loader2 className="w-4 h-4 mr-2 animate-spin" />
          ) : (
            <Download className="w-4 h-4 mr-2" />
          )}
          {isDownloading ? 'Generating PDF...' : 'Download PDF'}
        </Button>
      </div>

      {/* Contract Content */}
      <Card className="border-green-100 bg-green-50/30">
        <CardContent className="p-6">
          <div className="bg-white rounded-lg p-6 shadow-sm border max-h-[600px] overflow-y-auto">
            <pre className="whitespace-pre-wrap text-xs leading-relaxed text-gray-800 font-mono">
              {contract}
            </pre>
          </div>
        </CardContent>
      </Card>

      {/* Enhanced Disclaimer */}
      <Card className="border-amber-200 bg-amber-50">
        <CardContent className="p-4">
          <div className="flex items-start gap-3">
            <div className="w-6 h-6 rounded-full bg-amber-500 flex items-center justify-center flex-shrink-0 mt-0.5">
              <span className="text-white text-xs font-bold">!</span>
            </div>
            <div>
              <h4 className="font-semibold text-amber-800 mb-1">Important Legal Disclaimer</h4>
              <p className="text-sm text-amber-700 mb-2">
                This contract is AI-generated and provided for informational purposes only. While designed to be comprehensive and legally sound, it should be reviewed by a qualified attorney before execution.
              </p>
              <ul className="text-xs text-amber-600 space-y-1">
                <li>• Ensure compliance with local, state, and federal laws</li>
                <li>• Verify all terms meet your specific requirements</li>
                <li>• Consider jurisdiction-specific legal requirements</li>
                <li>• GenContract is not responsible for legal accuracy or consequences</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
