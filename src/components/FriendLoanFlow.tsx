
import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import { Separator } from '@/components/ui/separator';
import { ArrowLeft, ArrowRight, Download, DollarSign, User, Calendar, FileText, Handshake } from 'lucide-react';
import { DigitalSignature } from './DigitalSignature';
import jsPDF from 'jspdf';
import { useToast } from '@/hooks/use-toast';

interface FriendLoanFlowProps {
  onClose: () => void;
  isOpen: boolean;
}

interface LoanData {
  lenderName: string;
  lenderEmail: string;
  lenderPhone: string;
  borrowerName: string;
  borrowerEmail: string;
  borrowerPhone: string;
  loanAmount: string;
  loanDate: string;
  repaymentDate: string;
  hasInterest: boolean;
  interestRate: string;
  hasInstallments: boolean;
  installmentPlan: string;
  friendlyNote: string;
  additionalTerms: string;
}

export const FriendLoanFlow = ({ onClose, isOpen }: FriendLoanFlowProps) => {
  const [step, setStep] = useState(1);
  const [signatures, setSignatures] = useState<{ [key: string]: string }>({});
  const [showSignature, setShowSignature] = useState(false);
  const { toast } = useToast();

  const [data, setData] = useState<LoanData>({
    lenderName: '',
    lenderEmail: '',
    lenderPhone: '',
    borrowerName: '',
    borrowerEmail: '',
    borrowerPhone: '',
    loanAmount: '',
    loanDate: '',
    repaymentDate: '',
    hasInterest: false,
    interestRate: '',
    hasInstallments: false,
    installmentPlan: '',
    friendlyNote: '',
    additionalTerms: ''
  });

  const updateData = (field: keyof LoanData, value: any) => {
    setData(prev => ({ ...prev, [field]: value }));
  };

  const generateContract = () => {
    const interestSection = data.hasInterest && data.interestRate 
      ? `\n• Interest Rate: ${data.interestRate}% annually`
      : '\n• No interest will be charged on this loan';

    const installmentSection = data.hasInstallments && data.installmentPlan
      ? `\n• Repayment Plan: ${data.installmentPlan}`
      : '\n• Full repayment due on the specified date';

    return `
FRIEND LOAN AGREEMENT

This loan agreement is made between ${data.lenderName || '[LENDER NAME]'} (the "Lender") and ${data.borrowerName || '[BORROWER NAME]'} (the "Borrower") on ${data.loanDate || '[LOAN DATE]'}.

LOAN DETAILS:
• Loan Amount: $${data.loanAmount || '[LOAN AMOUNT]'}
• Loan Date: ${data.loanDate || '[LOAN DATE]'}
• Repayment Due Date: ${data.repaymentDate || '[REPAYMENT DATE]'}${interestSection}${installmentSection}

CONTACT INFORMATION:
Lender: ${data.lenderName || '[LENDER NAME]'}
Email: ${data.lenderEmail || '[LENDER EMAIL]'}
Phone: ${data.lenderPhone || '[LENDER PHONE]'}

Borrower: ${data.borrowerName || '[BORROWER NAME]'}
Email: ${data.borrowerEmail || '[BORROWER EMAIL]'}
Phone: ${data.borrowerPhone || '[BORROWER PHONE]'}

${data.friendlyNote ? `PERSONAL NOTE:\n${data.friendlyNote}\n` : ''}

TERMS & CONDITIONS:
1. The Borrower acknowledges receiving the full loan amount of $${data.loanAmount || '[AMOUNT]'} from the Lender.
2. The Borrower agrees to repay the loan in full by ${data.repaymentDate || '[REPAYMENT DATE]'}.
3. Both parties agree this is a personal loan between friends and will be handled with mutual respect.
4. In case of financial difficulty, the Borrower will communicate with the Lender to discuss alternative arrangements.
5. This agreement is legally binding and enforceable under applicable law.

${data.additionalTerms ? `ADDITIONAL TERMS:\n${data.additionalTerms}\n` : ''}

SIGNATURES:
By signing below, both parties agree to the terms outlined in this agreement.

Lender: ${data.lenderName || '[LENDER NAME]'} _________________ Date: ___________

Borrower: ${data.borrowerName || '[BORROWER NAME]'} _________________ Date: ___________

Generated by GenContract AI — Make It Official! 📝
    `.trim();
  };

  const handleDownloadPDF = () => {
    const contract = generateContract();
    const doc = new jsPDF();
    
    // Title
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('FRIEND LOAN AGREEMENT', 105, 30, { align: 'center' });
    
    // Content
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    const lines = doc.splitTextToSize(contract, 170);
    
    let y = 50;
    for (let i = 0; i < lines.length; i++) {
      if (y > 270) {
        doc.addPage();
        y = 30;
      }
      doc.text(lines[i], 20, y);
      y += 6;
    }
    
    // Add signatures if available
    if (signatures[data.lenderName] || signatures[data.borrowerName]) {
      y += 20;
      if (y > 250) {
        doc.addPage();
        y = 30;
      }
      
      doc.setFontSize(12);
      doc.setFont('helvetica', 'bold');
      doc.text('Digital Signatures:', 20, y);
      y += 15;
      
      if (signatures[data.lenderName]) {
        doc.text(`${data.lenderName}:`, 20, y);
        y += 20;
      }
      
      if (signatures[data.borrowerName]) {
        doc.text(`${data.borrowerName}:`, 20, y);
        y += 20;
      }
    }
    
    doc.save(`Friend_Loan_Agreement_${new Date().toISOString().split('T')[0]}.pdf`);
    
    toast({
      title: "PDF Downloaded",
      description: "Your friend loan agreement has been downloaded successfully!",
    });
  };

  const nextStep = () => {
    if (step < 4) setStep(step + 1);
  };

  const prevStep = () => {
    if (step > 1) setStep(step - 1);
  };

  const isStepValid = () => {
    switch (step) {
      case 1:
        return data.lenderName && data.borrowerName;
      case 2:
        return data.loanAmount && data.loanDate && data.repaymentDate;
      case 3:
        return true; // Optional step
      default:
        return true;
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-4xl max-h-[90vh] overflow-y-auto bg-white">
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle className="flex items-center gap-2 text-green-600">
            <DollarSign className="w-6 h-6" />
            Friend Loan Agreement Builder
          </CardTitle>
          <Button variant="ghost" onClick={onClose}>✕</Button>
        </CardHeader>
        
        <CardContent className="space-y-6">
          {/* Progress Steps */}
          <div className="flex items-center justify-between mb-8">
            {[1, 2, 3, 4].map((s) => (
              <div key={s} className="flex items-center">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                  step >= s ? 'bg-green-500 text-white' : 'bg-gray-200 text-gray-600'
                }`}>
                  {s}
                </div>
                {s < 4 && <div className={`w-12 h-1 mx-2 ${step > s ? 'bg-green-500' : 'bg-gray-200'}`} />}
              </div>
            ))}
          </div>

          {/* Step 1: Contact Information */}
          {step === 1 && (
            <div className="space-y-6">
              <div className="text-center">
                <User className="w-12 h-12 text-green-500 mx-auto mb-4" />
                <h3 className="text-xl font-semibold mb-2">Who's Involved?</h3>
                <p className="text-gray-600">Enter contact information for both parties</p>
              </div>
              
              <div className="grid md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <h4 className="font-semibold text-green-600 border-b pb-2">Lender Information</h4>
                  <div>
                    <Label htmlFor="lenderName">Full Name *</Label>
                    <Input
                      id="lenderName"
                      placeholder="Enter lender's name"
                      value={data.lenderName}
                      onChange={(e) => updateData('lenderName', e.target.value)}
                    />
                  </div>
                  <div>
                    <Label htmlFor="lenderEmail">Email</Label>
                    <Input
                      id="lenderEmail"
                      type="email"
                      placeholder="lender@email.com"
                      value={data.lenderEmail}
                      onChange={(e) => updateData('lenderEmail', e.target.value)}
                    />
                  </div>
                  <div>
                    <Label htmlFor="lenderPhone">Phone</Label>
                    <Input
                      id="lenderPhone"
                      placeholder="+1 (555) 123-4567"
                      value={data.lenderPhone}
                      onChange={(e) => updateData('lenderPhone', e.target.value)}
                    />
                  </div>
                </div>
                
                <div className="space-y-4">
                  <h4 className="font-semibold text-blue-600 border-b pb-2">Borrower Information</h4>
                  <div>
                    <Label htmlFor="borrowerName">Full Name *</Label>
                    <Input
                      id="borrowerName"
                      placeholder="Enter borrower's name"
                      value={data.borrowerName}
                      onChange={(e) => updateData('borrowerName', e.target.value)}
                    />
                  </div>
                  <div>
                    <Label htmlFor="borrowerEmail">Email</Label>
                    <Input
                      id="borrowerEmail"
                      type="email"
                      placeholder="borrower@email.com"
                      value={data.borrowerEmail}
                      onChange={(e) => updateData('borrowerEmail', e.target.value)}
                    />
                  </div>
                  <div>
                    <Label htmlFor="borrowerPhone">Phone</Label>
                    <Input
                      id="borrowerPhone"
                      placeholder="+1 (555) 123-4567"
                      value={data.borrowerPhone}
                      onChange={(e) => updateData('borrowerPhone', e.target.value)}
                    />
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Step 2: Loan Details */}
          {step === 2 && (
            <div className="space-y-6">
              <div className="text-center">
                <DollarSign className="w-12 h-12 text-green-500 mx-auto mb-4" />
                <h3 className="text-xl font-semibold mb-2">Loan Details</h3>
                <p className="text-gray-600">Amount, dates, and basic terms</p>
              </div>
              
              <div className="grid md:grid-cols-3 gap-4">
                <div>
                  <Label htmlFor="loanAmount">Loan Amount ($) *</Label>
                  <Input
                    id="loanAmount"
                    type="number"
                    placeholder="500"
                    value={data.loanAmount}
                    onChange={(e) => updateData('loanAmount', e.target.value)}
                  />
                </div>
                <div>
                  <Label htmlFor="loanDate">Loan Date *</Label>
                  <Input
                    id="loanDate"
                    type="date"
                    value={data.loanDate}
                    onChange={(e) => updateData('loanDate', e.target.value)}
                  />
                </div>
                <div>
                  <Label htmlFor="repaymentDate">Repayment Date *</Label>
                  <Input
                    id="repaymentDate"
                    type="date"
                    value={data.repaymentDate}
                    onChange={(e) => updateData('repaymentDate', e.target.value)}
                  />
                </div>
              </div>
              
              <Separator />
              
              <div className="space-y-4">
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="hasInterest"
                    checked={data.hasInterest}
                    onCheckedChange={(checked) => updateData('hasInterest', checked)}
                  />
                  <Label htmlFor="hasInterest">Add Interest Rate</Label>
                </div>
                
                {data.hasInterest && (
                  <div>
                    <Label htmlFor="interestRate">Interest Rate (% annually)</Label>
                    <Input
                      id="interestRate"
                      type="number"
                      placeholder="5"
                      value={data.interestRate}
                      onChange={(e) => updateData('interestRate', e.target.value)}
                    />
                  </div>
                )}
                
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="hasInstallments"
                    checked={data.hasInstallments}
                    onCheckedChange={(checked) => updateData('hasInstallments', checked)}
                  />
                  <Label htmlFor="hasInstallments">Set up Installment Plan</Label>
                </div>
                
                {data.hasInstallments && (
                  <div>
                    <Label htmlFor="installmentPlan">Installment Details</Label>
                    <Textarea
                      id="installmentPlan"
                      placeholder="e.g., $100 monthly payments for 5 months"
                      value={data.installmentPlan}
                      onChange={(e) => updateData('installmentPlan', e.target.value)}
                    />
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Step 3: Personal Touch & Terms */}
          {step === 3 && (
            <div className="space-y-6">
              <div className="text-center">
                <Handshake className="w-12 h-12 text-purple-500 mx-auto mb-4" />
                <h3 className="text-xl font-semibold mb-2">Personal Touch</h3>
                <p className="text-gray-600">Add a friendly note and any special terms</p>
              </div>
              
              <div>
                <Label htmlFor="friendlyNote">Friendly Message (Optional)</Label>
                <Textarea
                  id="friendlyNote"
                  placeholder="Hey! Thanks for helping me out with this loan. I really appreciate your trust and I promise to pay you back on time. 😊"
                  rows={3}
                  value={data.friendlyNote}
                  onChange={(e) => updateData('friendlyNote', e.target.value)}
                />
              </div>
              
              <div>
                <Label htmlFor="additionalTerms">Additional Terms (Optional)</Label>
                <Textarea
                  id="additionalTerms"
                  placeholder="e.g., Early repayment allowed without penalty, Grace period of 7 days, etc."
                  rows={4}
                  value={data.additionalTerms}
                  onChange={(e) => updateData('additionalTerms', e.target.value)}
                />
              </div>
            </div>
          )}

          {/* Step 4: Preview & Signatures */}
          {step === 4 && (
            <div className="space-y-6">
              <div className="text-center">
                <FileText className="w-12 h-12 text-indigo-500 mx-auto mb-4" />
                <h3 className="text-xl font-semibold mb-2">Review & Sign</h3>
                <p className="text-gray-600">Review your loan agreement and add signatures</p>
              </div>
              
              <div className="bg-gray-50 p-6 rounded-lg border max-h-96 overflow-y-auto">
                <pre className="whitespace-pre-wrap text-sm font-mono leading-relaxed">
                  {generateContract()}
                </pre>
              </div>
              
              <div className="flex gap-4">
                <Button
                  onClick={() => setShowSignature(true)}
                  className="flex-1 bg-green-600 hover:bg-green-700"
                >
                  Add Digital Signatures
                </Button>
                <Button
                  onClick={handleDownloadPDF}
                  variant="outline"
                  className="flex items-center gap-2"
                >
                  <Download className="w-4 h-4" />
                  Download PDF
                </Button>
              </div>
              
              {Object.keys(signatures).length > 0 && (
                <div className="text-center text-green-600 font-medium">
                  ✓ Signatures collected: {Object.keys(signatures).length}/2
                </div>
              )}
            </div>
          )}

          {/* Navigation */}
          <div className="flex justify-between pt-6 border-t">
            <Button
              onClick={prevStep}
              variant="outline"
              disabled={step === 1}
              className="flex items-center gap-2"
            >
              <ArrowLeft className="w-4 h-4" />
              Previous
            </Button>
            
            {step < 4 ? (
              <Button
                onClick={nextStep}
                disabled={!isStepValid()}
                className="flex items-center gap-2"
              >
                Next
                <ArrowRight className="w-4 h-4" />
              </Button>
            ) : (
              <Button
                onClick={onClose}
                className="bg-green-600 hover:bg-green-700"
              >
                Complete Agreement ✓
              </Button>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Digital Signature Modal */}
      <DigitalSignature
        isOpen={showSignature}
        onClose={() => setShowSignature(false)}
        parties={[data.lenderName, data.borrowerName].filter(Boolean)}
        onSignatureChange={setSignatures}
      />
    </div>
  );
};
