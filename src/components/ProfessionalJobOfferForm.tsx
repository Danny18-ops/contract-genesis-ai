
import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Briefcase, User, DollarSign, Calendar, FileText } from 'lucide-react';

interface ProfessionalJobOfferFormProps {
  isOpen: boolean;
  onClose: () => void;
  onContractGenerate: (contractData: any) => void;
}

export const ProfessionalJobOfferForm = ({ isOpen, onClose, onContractGenerate }: ProfessionalJobOfferFormProps) => {
  const [formData, setFormData] = useState({
    // Company Information
    companyName: '',
    companyAddress: '',
    companyEmail: '',
    companyPhone: '',
    hiringManager: '',
    
    // Candidate Information
    candidateName: '',
    candidateAddress: '',
    candidateEmail: '',
    candidatePhone: '',
    
    // Position Details
    jobTitle: '',
    department: '',
    reportingTo: '',
    workLocation: '',
    employmentType: '',
    startDate: '',
    
    // Compensation
    annualSalary: '',
    payFrequency: '',
    bonusEligible: false,
    bonusDetails: '',
    
    // Benefits
    healthInsurance: false,
    dentalInsurance: false,
    visionInsurance: false,
    retirement401k: false,
    paidTimeOff: '',
    
    // Terms
    probationPeriod: '',
    workingHours: '',
    overtimePolicy: '',
    confidentialityRequired: false,
    nonCompeteRequired: false,
    
    // Additional Terms
    additionalTerms: '',
    governingLaw: ''
  });

  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSubmit = () => {
    const contractData = {
      contractType: 'jobOffer',
      template: 'professional',
      organizationData: {
        name: formData.companyName,
        address: formData.companyAddress,
        email: formData.companyEmail,
        phone: formData.companyPhone,
        logo: ''
      },
      dynamicFields: {
        ...formData,
        jurisdiction: formData.governingLaw
      },
      language: 'en',
      footerText: 'Generated by GenContract â€” Professional Series'
    };

    onContractGenerate(contractData);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-2xl">
            <Briefcase className="w-6 h-6 text-blue-600" />
            Professional Job Offer Letter
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* Company Information */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <User className="w-5 h-5" />
                Company Information
              </CardTitle>
            </CardHeader>
            <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="companyName">Company Name *</Label>
                <Input
                  id="companyName"
                  value={formData.companyName}
                  onChange={(e) => handleInputChange('companyName', e.target.value)}
                  placeholder="ABC Corporation"
                />
              </div>
              <div>
                <Label htmlFor="hiringManager">Hiring Manager *</Label>
                <Input
                  id="hiringManager"
                  value={formData.hiringManager}
                  onChange={(e) => handleInputChange('hiringManager', e.target.value)}
                  placeholder="John Smith"
                />
              </div>
              <div className="md:col-span-2">
                <Label htmlFor="companyAddress">Company Address *</Label>
                <Input
                  id="companyAddress"
                  value={formData.companyAddress}
                  onChange={(e) => handleInputChange('companyAddress', e.target.value)}
                  placeholder="123 Business St, City, State 12345"
                />
              </div>
              <div>
                <Label htmlFor="companyEmail">Company Email *</Label>
                <Input
                  id="companyEmail"
                  type="email"
                  value={formData.companyEmail}
                  onChange={(e) => handleInputChange('companyEmail', e.target.value)}
                  placeholder="hr@company.com"
                />
              </div>
              <div>
                <Label htmlFor="companyPhone">Company Phone *</Label>
                <Input
                  id="companyPhone"
                  value={formData.companyPhone}
                  onChange={(e) => handleInputChange('companyPhone', e.target.value)}
                  placeholder="(555) 123-4567"
                />
              </div>
            </CardContent>
          </Card>

          {/* Candidate Information */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <User className="w-5 h-5" />
                Candidate Information
              </CardTitle>
            </CardHeader>
            <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="candidateName">Candidate Name *</Label>
                <Input
                  id="candidateName"
                  value={formData.candidateName}
                  onChange={(e) => handleInputChange('candidateName', e.target.value)}
                  placeholder="Jane Doe"
                />
              </div>
              <div>
                <Label htmlFor="candidateEmail">Candidate Email *</Label>
                <Input
                  id="candidateEmail"
                  type="email"
                  value={formData.candidateEmail}
                  onChange={(e) => handleInputChange('candidateEmail', e.target.value)}
                  placeholder="jane@email.com"
                />
              </div>
              <div className="md:col-span-2">
                <Label htmlFor="candidateAddress">Candidate Address</Label>
                <Input
                  id="candidateAddress"
                  value={formData.candidateAddress}
                  onChange={(e) => handleInputChange('candidateAddress', e.target.value)}
                  placeholder="456 Home St, City, State 12345"
                />
              </div>
            </CardContent>
          </Card>

          {/* Position Details */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Briefcase className="w-5 h-5" />
                Position Details
              </CardTitle>
            </CardHeader>
            <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="jobTitle">Job Title *</Label>
                <Input
                  id="jobTitle"
                  value={formData.jobTitle}
                  onChange={(e) => handleInputChange('jobTitle', e.target.value)}
                  placeholder="Software Engineer"
                />
              </div>
              <div>
                <Label htmlFor="department">Department *</Label>
                <Input
                  id="department"
                  value={formData.department}
                  onChange={(e) => handleInputChange('department', e.target.value)}
                  placeholder="Engineering"
                />
              </div>
              <div>
                <Label htmlFor="employmentType">Employment Type *</Label>
                <Select value={formData.employmentType} onValueChange={(value) => handleInputChange('employmentType', value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select employment type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="full-time">Full-time</SelectItem>
                    <SelectItem value="part-time">Part-time</SelectItem>
                    <SelectItem value="contract">Contract</SelectItem>
                    <SelectItem value="temporary">Temporary</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="startDate">Start Date *</Label>
                <Input
                  id="startDate"
                  type="date"
                  value={formData.startDate}
                  onChange={(e) => handleInputChange('startDate', e.target.value)}
                />
              </div>
              <div>
                <Label htmlFor="workLocation">Work Location *</Label>
                <Input
                  id="workLocation"
                  value={formData.workLocation}
                  onChange={(e) => handleInputChange('workLocation', e.target.value)}
                  placeholder="Office/Remote/Hybrid"
                />
              </div>
              <div>
                <Label htmlFor="reportingTo">Reports To</Label>
                <Input
                  id="reportingTo"
                  value={formData.reportingTo}
                  onChange={(e) => handleInputChange('reportingTo', e.target.value)}
                  placeholder="Engineering Manager"
                />
              </div>
            </CardContent>
          </Card>

          {/* Compensation */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <DollarSign className="w-5 h-5" />
                Compensation & Benefits
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="annualSalary">Annual Salary *</Label>
                  <Input
                    id="annualSalary"
                    value={formData.annualSalary}
                    onChange={(e) => handleInputChange('annualSalary', e.target.value)}
                    placeholder="75000"
                  />
                </div>
                <div>
                  <Label htmlFor="payFrequency">Pay Frequency *</Label>
                  <Select value={formData.payFrequency} onValueChange={(value) => handleInputChange('payFrequency', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select frequency" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="weekly">Weekly</SelectItem>
                      <SelectItem value="bi-weekly">Bi-weekly</SelectItem>
                      <SelectItem value="monthly">Monthly</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="paidTimeOff">Paid Time Off (Days/Year)</Label>
                  <Input
                    id="paidTimeOff"
                    value={formData.paidTimeOff}
                    onChange={(e) => handleInputChange('paidTimeOff', e.target.value)}
                    placeholder="15"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label>Benefits (Check all that apply)</Label>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      checked={formData.healthInsurance}
                      onCheckedChange={(checked) => handleInputChange('healthInsurance', checked)}
                    />
                    <Label>Health Insurance</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      checked={formData.dentalInsurance}
                      onCheckedChange={(checked) => handleInputChange('dentalInsurance', checked)}
                    />
                    <Label>Dental Insurance</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      checked={formData.visionInsurance}
                      onCheckedChange={(checked) => handleInputChange('visionInsurance', checked)}
                    />
                    <Label>Vision Insurance</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      checked={formData.retirement401k}
                      onCheckedChange={(checked) => handleInputChange('retirement401k', checked)}
                    />
                    <Label>401(k) Plan</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      checked={formData.bonusEligible}
                      onCheckedChange={(checked) => handleInputChange('bonusEligible', checked)}
                    />
                    <Label>Bonus Eligible</Label>
                  </div>
                </div>
              </div>

              {formData.bonusEligible && (
                <div>
                  <Label htmlFor="bonusDetails">Bonus Details</Label>
                  <Textarea
                    id="bonusDetails"
                    value={formData.bonusDetails}
                    onChange={(e) => handleInputChange('bonusDetails', e.target.value)}
                    placeholder="Annual performance bonus up to 10% of base salary"
                  />
                </div>
              )}
            </CardContent>
          </Card>

          {/* Terms & Conditions */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="w-5 h-5" />
                Terms & Conditions
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="probationPeriod">Probation Period (months)</Label>
                  <Input
                    id="probationPeriod"
                    value={formData.probationPeriod}
                    onChange={(e) => handleInputChange('probationPeriod', e.target.value)}
                    placeholder="3"
                  />
                </div>
                <div>
                  <Label htmlFor="workingHours">Working Hours</Label>
                  <Input
                    id="workingHours"
                    value={formData.workingHours}
                    onChange={(e) => handleInputChange('workingHours', e.target.value)}
                    placeholder="9:00 AM - 5:00 PM"
                  />
                </div>
                <div>
                  <Label htmlFor="governingLaw">Governing Law *</Label>
                  <Input
                    id="governingLaw"
                    value={formData.governingLaw}
                    onChange={(e) => handleInputChange('governingLaw', e.target.value)}
                    placeholder="State of California"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <div className="flex items-center space-x-2">
                  <Checkbox
                    checked={formData.confidentialityRequired}
                    onCheckedChange={(checked) => handleInputChange('confidentialityRequired', checked)}
                  />
                  <Label>Confidentiality Agreement Required</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox
                    checked={formData.nonCompeteRequired}
                    onCheckedChange={(checked) => handleInputChange('nonCompeteRequired', checked)}
                  />
                  <Label>Non-Compete Agreement Required</Label>
                </div>
              </div>

              <div>
                <Label htmlFor="additionalTerms">Additional Terms & Conditions</Label>
                <Textarea
                  id="additionalTerms"
                  value={formData.additionalTerms}
                  onChange={(e) => handleInputChange('additionalTerms', e.target.value)}
                  placeholder="Any additional terms, policies, or conditions..."
                  rows={4}
                />
              </div>
            </CardContent>
          </Card>

          {/* Action Buttons */}
          <div className="flex gap-4 pt-4">
            <Button onClick={onClose} variant="outline" className="flex-1">
              Cancel
            </Button>
            <Button onClick={handleSubmit} className="flex-1 bg-blue-600 hover:bg-blue-700">
              Generate Job Offer Letter
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};
