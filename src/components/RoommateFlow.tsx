import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import { Separator } from '@/components/ui/separator';
import { ArrowLeft, ArrowRight, Download, Users, Home, DollarSign, Calendar, Brush, FileText } from 'lucide-react';
import { DigitalSignature } from './DigitalSignature';
import { generateEnhancedPdf } from '@/utils/enhancedPdfGenerator';
import { useToast } from '@/hooks/use-toast';

interface RoommateFlowProps {
  onClose: () => void;
  isOpen: boolean;
}

interface RoommateData {
  user1Name: string;
  user2Name: string;
  propertyAddress: string;
  totalRent: string;
  user1RentShare: string;
  user2RentShare: string;
  startDate: string;
  endDate: string;
  utilities: string[];
  chores: {
    user1: string;
    user2: string;
  };
  rules: string;
}

const utilityOptions = [
  'WiFi/Internet',
  'Electricity',
  'Water',
  'Gas',
  'Trash/Recycling',
  'Cable/Streaming',
  'Heating/AC'
];

export const RoommateFlow = ({ onClose, isOpen }: RoommateFlowProps) => {
  const [step, setStep] = useState(1);
  const [signatures, setSignatures] = useState<{ [key: string]: string }>({});
  const [showSignature, setShowSignature] = useState(false);
  const { toast } = useToast();

  const [data, setData] = useState<RoommateData>({
    user1Name: '',
    user2Name: '',
    propertyAddress: '',
    totalRent: '',
    user1RentShare: '',
    user2RentShare: '',
    startDate: '',
    endDate: '',
    utilities: [],
    chores: {
      user1: '',
      user2: ''
    },
    rules: ''
  });

  const updateData = (field: keyof RoommateData, value: any) => {
    setData(prev => ({ ...prev, [field]: value }));
  };

  const updateUtilities = (utility: string, checked: boolean) => {
    setData(prev => ({
      ...prev,
      utilities: checked 
        ? [...prev.utilities, utility]
        : prev.utilities.filter(u => u !== utility)
    }));
  };

  const generateContract = () => {
    return `
ROOMMATE AGREEMENT

This Roommate Agreement is entered into between ${data.user1Name || '[USER 1 NAME]'} and ${data.user2Name || '[USER 2 NAME]'} for the property located at ${data.propertyAddress || '[PROPERTY ADDRESS]'}.

RENTAL DETAILS:
• Total Monthly Rent: $${data.totalRent || '[TOTAL RENT]'}
• ${data.user1Name || '[USER 1]'} Rent Share: $${data.user1RentShare || '[SHARE 1]'}
• ${data.user2Name || '[USER 2]'} Rent Share: $${data.user2RentShare || '[SHARE 2]'}
• Lease Period: ${data.startDate || '[START DATE]'} to ${data.endDate || '[END DATE]'}

SHARED UTILITIES:
${data.utilities.length > 0 ? data.utilities.map(u => `• ${u}`).join('\n') : '• [NO UTILITIES SPECIFIED]'}

CHORE RESPONSIBILITIES:
• ${data.user1Name || '[USER 1]'}: ${data.chores.user1 || '[NO CHORES SPECIFIED]'}
• ${data.user2Name || '[USER 2]'}: ${data.chores.user2 || '[NO CHORES SPECIFIED]'}

HOUSE RULES & POLICIES:
${data.rules || '[NO SPECIFIC RULES SPECIFIED]'}

GENERAL TERMS:
1. Both roommates agree to split shared expenses equally unless otherwise specified.
2. Rent is due on the 1st of each month.
3. 30 days notice required for any changes to this agreement.
4. Both parties must maintain cleanliness and respect common areas.
5. Any disputes will be resolved through open communication first.

This agreement is effective as of ${data.startDate || '[START DATE]'} and remains in effect until ${data.endDate || '[END DATE]'} or until terminated by mutual agreement.

Signatures:
${data.user1Name || '[USER 1 NAME]'}: _____________________  Date: ___________

${data.user2Name || '[USER 2 NAME]'}: _____________________  Date: ___________

Generated by GenContract AI — Make It Official! 📝
    `.trim();
  };

  const handleDownloadPDF = () => {
    const contract = generateContract();
    
    // Use enhanced PDF generator
    const pdf = generateEnhancedPdf({
      contractType: 'roommate',
      contractData: data,
      contract,
      template: 'modern'
    });
    
    pdf.save(`Roommate_Agreement_${new Date().toISOString().split('T')[0]}.pdf`);
    
    toast({
      title: "Enhanced PDF Downloaded",
      description: "Your beautifully styled roommate agreement has been downloaded! 🏠",
    });
  };

  const nextStep = () => {
    if (step < 4) setStep(step + 1);
  };

  const prevStep = () => {
    if (step > 1) setStep(step - 1);
  };

  const isStepValid = () => {
    switch (step) {
      case 1:
        return data.user1Name && data.user2Name;
      case 2:
        return data.propertyAddress && data.totalRent;
      case 3:
        return data.startDate && data.endDate;
      default:
        return true;
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-4xl max-h-[90vh] overflow-y-auto bg-white">
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle className="flex items-center gap-2 text-blue-600">
            <Users className="w-6 h-6" />
            Roommate Agreement Builder
          </CardTitle>
          <Button variant="ghost" onClick={onClose}>✕</Button>
        </CardHeader>
        
        <CardContent className="space-y-6">
          {/* Progress Steps */}
          <div className="flex items-center justify-between mb-8">
            {[1, 2, 3, 4].map((s) => (
              <div key={s} className="flex items-center">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                  step >= s ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-600'
                }`}>
                  {s}
                </div>
                {s < 4 && <div className={`w-12 h-1 mx-2 ${step > s ? 'bg-blue-500' : 'bg-gray-200'}`} />}
              </div>
            ))}
          </div>

          {/* Step 1: Names */}
          {step === 1 && (
            <div className="space-y-6">
              <div className="text-center">
                <Users className="w-12 h-12 text-blue-500 mx-auto mb-4" />
                <h3 className="text-xl font-semibold mb-2">Who's Living Together?</h3>
                <p className="text-gray-600">Let's start with the basics — your names!</p>
              </div>
              
              <div className="grid md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="user1Name">First Roommate Name *</Label>
                  <Input
                    id="user1Name"
                    placeholder="Enter first roommate's name"
                    value={data.user1Name}
                    onChange={(e) => updateData('user1Name', e.target.value)}
                  />
                </div>
                <div>
                  <Label htmlFor="user2Name">Second Roommate Name *</Label>
                  <Input
                    id="user2Name"
                    placeholder="Enter second roommate's name"
                    value={data.user2Name}
                    onChange={(e) => updateData('user2Name', e.target.value)}
                  />
                </div>
              </div>
            </div>
          )}

          {/* Step 2: Address & Rent */}
          {step === 2 && (
            <div className="space-y-6">
              <div className="text-center">
                <Home className="w-12 h-12 text-green-500 mx-auto mb-4" />
                <h3 className="text-xl font-semibold mb-2">Address & Money Matters</h3>
                <p className="text-gray-600">Where you'll live and how you'll split the bills</p>
              </div>
              
              <div>
                <Label htmlFor="propertyAddress">Property Address *</Label>
                <Input
                  id="propertyAddress"
                  placeholder="Enter the full address"
                  value={data.propertyAddress}
                  onChange={(e) => updateData('propertyAddress', e.target.value)}
                />
              </div>
              
              <div className="grid md:grid-cols-3 gap-4">
                <div>
                  <Label htmlFor="totalRent">Total Monthly Rent ($) *</Label>
                  <Input
                    id="totalRent"
                    type="number"
                    placeholder="2000"
                    value={data.totalRent}
                    onChange={(e) => updateData('totalRent', e.target.value)}
                  />
                </div>
                <div>
                  <Label htmlFor="user1RentShare">{data.user1Name || 'User 1'} Share ($)</Label>
                  <Input
                    id="user1RentShare"
                    type="number"
                    placeholder="1000"
                    value={data.user1RentShare}
                    onChange={(e) => updateData('user1RentShare', e.target.value)}
                  />
                </div>
                <div>
                  <Label htmlFor="user2RentShare">{data.user2Name || 'User 2'} Share ($)</Label>
                  <Input
                    id="user2RentShare"
                    type="number"
                    placeholder="1000"
                    value={data.user2RentShare}
                    onChange={(e) => updateData('user2RentShare', e.target.value)}
                  />
                </div>
              </div>
              
              <div>
                <Label className="text-base font-medium mb-3 block">Shared Utilities</Label>
                <div className="grid md:grid-cols-2 gap-3">
                  {utilityOptions.map((utility) => (
                    <div key={utility} className="flex items-center space-x-2">
                      <Checkbox
                        id={utility}
                        checked={data.utilities.includes(utility)}
                        onCheckedChange={(checked) => updateUtilities(utility, checked as boolean)}
                      />
                      <Label htmlFor={utility} className="text-sm">{utility}</Label>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* Step 3: Dates & Chores */}
          {step === 3 && (
            <div className="space-y-6">
              <div className="text-center">
                <Calendar className="w-12 h-12 text-purple-500 mx-auto mb-4" />
                <h3 className="text-xl font-semibold mb-2">Dates & Chores</h3>
                <p className="text-gray-600">When does this start and who does what?</p>
              </div>
              
              <div className="grid md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="startDate">Start Date *</Label>
                  <Input
                    id="startDate"
                    type="date"
                    value={data.startDate}
                    onChange={(e) => updateData('startDate', e.target.value)}
                  />
                </div>
                <div>
                  <Label htmlFor="endDate">End Date *</Label>
                  <Input
                    id="endDate"
                    type="date"
                    value={data.endDate}
                    onChange={(e) => updateData('endDate', e.target.value)}
                  />
                </div>
              </div>
              
              <Separator />
              
              <div>
                <div className="flex items-center gap-2 mb-4">
                  <Brush className="w-5 h-5 text-blue-500" />
                  <Label className="text-base font-medium">Chore Responsibilities</Label>
                </div>
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="user1Chores">{data.user1Name || 'User 1'} Responsibilities</Label>
                    <Textarea
                      id="user1Chores"
                      placeholder="e.g., Kitchen cleaning, trash duty..."
                      value={data.chores.user1}
                      onChange={(e) => updateData('chores', { ...data.chores, user1: e.target.value })}
                    />
                  </div>
                  <div>
                    <Label htmlFor="user2Chores">{data.user2Name || 'User 2'} Responsibilities</Label>
                    <Textarea
                      id="user2Chores"
                      placeholder="e.g., Bathroom cleaning, vacuuming..."
                      value={data.chores.user2}
                      onChange={(e) => updateData('chores', { ...data.chores, user2: e.target.value })}
                    />
                  </div>
                </div>
              </div>
              
              <div>
                <Label htmlFor="rules">House Rules & Policies (Optional)</Label>
                <Textarea
                  id="rules"
                  placeholder="e.g., No overnight guests on weekdays, quiet hours after 10 PM, no pets..."
                  rows={4}
                  value={data.rules}
                  onChange={(e) => updateData('rules', e.target.value)}
                />
              </div>
            </div>
          )}

          {/* Step 4: Preview & Signatures */}
          {step === 4 && (
            <div className="space-y-6">
              <div className="text-center">
                <FileText className="w-12 h-12 text-indigo-500 mx-auto mb-4" />
                <h3 className="text-xl font-semibold mb-2">Review & Sign</h3>
                <p className="text-gray-600">Almost done! Review your agreement and add signatures</p>
              </div>
              
              <div className="bg-gray-50 p-6 rounded-lg border max-h-96 overflow-y-auto">
                <pre className="whitespace-pre-wrap text-sm font-mono leading-relaxed">
                  {generateContract()}
                </pre>
              </div>
              
              <div className="flex gap-4">
                <Button
                  onClick={() => setShowSignature(true)}
                  className="flex-1 bg-blue-600 hover:bg-blue-700"
                >
                  Add Digital Signatures
                </Button>
                <Button
                  onClick={handleDownloadPDF}
                  variant="outline"
                  className="flex items-center gap-2 bg-gradient-to-r from-pink-500 to-pink-600 text-white hover:from-pink-600 hover:to-pink-700"
                >
                  <Download className="w-4 h-4" />
                  Download Enhanced PDF
                </Button>
              </div>
              
              {Object.keys(signatures).length > 0 && (
                <div className="text-center text-green-600 font-medium">
                  ✓ Signatures collected: {Object.keys(signatures).length}/2
                </div>
              )}
            </div>
          )}

          {/* Navigation */}
          <div className="flex justify-between pt-6 border-t">
            <Button
              onClick={prevStep}
              variant="outline"
              disabled={step === 1}
              className="flex items-center gap-2"
            >
              <ArrowLeft className="w-4 h-4" />
              Previous
            </Button>
            
            {step < 4 ? (
              <Button
                onClick={nextStep}
                disabled={!isStepValid()}
                className="flex items-center gap-2"
              >
                Next
                <ArrowRight className="w-4 h-4" />
              </Button>
            ) : (
              <Button
                onClick={onClose}
                className="bg-green-600 hover:bg-green-700"
              >
                Complete Agreement ✓
              </Button>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Digital Signature Modal */}
      <DigitalSignature
        isOpen={showSignature}
        onClose={() => setShowSignature(false)}
        parties={[data.user1Name, data.user2Name].filter(Boolean)}
        onSignatureChange={setSignatures}
      />
    </div>
  );
};
