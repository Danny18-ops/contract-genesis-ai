
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { Calendar, MapPin, DollarSign, FileText, Users, Zap, PenTool } from 'lucide-react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { useToast } from '@/hooks/use-toast';

interface ProfessionalRentalFormProps {
  isOpen: boolean;
  onClose: () => void;
  onContractGenerate: (contractData: any) => void;
}

export const ProfessionalRentalForm = ({ isOpen, onClose, onContractGenerate }: ProfessionalRentalFormProps) => {
  const { toast } = useToast();
  
  console.log('ProfessionalRentalForm rendering - isOpen:', isOpen);
  
  const [formData, setFormData] = useState({
    // üßë‚Äçüíº Parties Involved
    landlordName: '',
    landlordEmail: '',
    landlordPhone: '',
    tenantName: '',
    tenantEmail: '',
    tenantPhone: '',
    
    // üè† Property Details
    propertyAddress: '',
    unitNumber: '',
    leaseStartDate: '',
    leaseEndDate: '',
    monthlyRent: '',
    securityDeposit: '',
    rentDueDate: '1',
    
    // üí° Utilities & Charges
    waterPaidBy: 'tenant',
    electricityPaidBy: 'tenant',
    gasPaidBy: 'tenant',
    internetPaidBy: 'tenant',
    parkingCharges: '',
    storageCharges: '',
    lateFeeAmount: '',
    
    // üìã Terms & Conditions
    leaseType: 'fixed',
    petPolicy: false,
    maintenanceResponsibilities: '',
    moveOutNotice: '30',
    governingLaw: 'California',
    
    // Landlord Logo
    landlordLogo: ''
  });

  const handleInputChange = (field: string, value: string | boolean) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const validateForm = () => {
    const required = [
      'landlordName', 'tenantName', 'propertyAddress', 
      'leaseStartDate', 'leaseEndDate', 'monthlyRent', 'securityDeposit'
    ];
    
    for (const field of required) {
      if (!formData[field as keyof typeof formData]) {
        return false;
      }
    }
    
    return true;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    console.log('Professional rental form submitted with data:', formData);
    
    if (!validateForm()) {
      toast({
        title: "Validation Error",
        description: "Please fill in all required fields marked with *",
        variant: "destructive"
      });
      return;
    }

    const contractData = {
      contractType: 'professionalRental',
      template: 'professional',
      ...formData,
      organizationData: {
        name: formData.landlordName,
        email: formData.landlordEmail,
        phone: formData.landlordPhone,
        logo: formData.landlordLogo,
        address: formData.propertyAddress
      },
      footerText: 'Generated by GenContract ‚Äî Professional Series'
    };

    console.log('Generating professional rental contract with data:', contractData);
    onContractGenerate(contractData);
    
    toast({
      title: "Contract Generated",
      description: "Your professional rental agreement has been created successfully!",
    });
    
    onClose();
  };

  const stateOptions = [
    'Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware',
    'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky',
    'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi',
    'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico',
    'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania',
    'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont',
    'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'
  ];

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="w-[95vw] max-w-5xl h-[90vh] max-h-[90vh] overflow-hidden flex flex-col p-0">
        <DialogHeader className="px-4 sm:px-6 py-4 border-b flex-shrink-0 bg-gradient-to-r from-green-50 to-emerald-50">
          <DialogTitle className="flex items-center gap-3 text-lg sm:text-xl text-green-700">
            <FileText className="w-6 h-6 text-green-600" />
            Professional Rental Agreement Builder
            <span className="text-sm font-normal text-green-600">‚Äî Comprehensive Lease Creator</span>
          </DialogTitle>
        </DialogHeader>

        <div className="flex-1 overflow-y-auto px-4 sm:px-6">
          <form onSubmit={handleSubmit} className="space-y-6 py-6">
            
            {/* üßë‚Äçüíº Parties Involved */}
            <Card className="border-green-200">
              <CardHeader className="pb-4 bg-green-50">
                <CardTitle className="flex items-center gap-2 text-lg text-green-700">
                  <Users className="w-5 h-5" />
                  üßë‚Äçüíº Parties Involved
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6 pt-6">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                  {/* Landlord Information */}
                  <div className="space-y-4">
                    <h4 className="font-semibold text-gray-800 text-base border-b border-gray-200 pb-2">
                      Landlord Information
                    </h4>
                    <div className="space-y-3">
                      <div>
                        <Label htmlFor="landlordName" className="text-sm font-medium">Landlord Name *</Label>
                        <Input
                          id="landlordName"
                          value={formData.landlordName}
                          onChange={(e) => handleInputChange('landlordName', e.target.value)}
                          placeholder="Enter full legal name"
                          required
                          className="mt-1"
                        />
                      </div>
                      <div>
                        <Label htmlFor="landlordEmail" className="text-sm font-medium">Email Address</Label>
                        <Input
                          id="landlordEmail"
                          type="email"
                          value={formData.landlordEmail}
                          onChange={(e) => handleInputChange('landlordEmail', e.target.value)}
                          placeholder="landlord@example.com"
                          className="mt-1"
                        />
                      </div>
                      <div>
                        <Label htmlFor="landlordPhone" className="text-sm font-medium">Phone Number</Label>
                        <Input
                          id="landlordPhone"
                          value={formData.landlordPhone}
                          onChange={(e) => handleInputChange('landlordPhone', e.target.value)}
                          placeholder="(555) 123-4567"
                          className="mt-1"
                        />
                      </div>
                    </div>
                  </div>
                  
                  {/* Tenant Information */}
                  <div className="space-y-4">
                    <h4 className="font-semibold text-gray-800 text-base border-b border-gray-200 pb-2">
                      Tenant Information
                    </h4>
                    <div className="space-y-3">
                      <div>
                        <Label htmlFor="tenantName" className="text-sm font-medium">Tenant Name *</Label>
                        <Input
                          id="tenantName"
                          value={formData.tenantName}
                          onChange={(e) => handleInputChange('tenantName', e.target.value)}
                          placeholder="Enter full legal name"
                          required
                          className="mt-1"
                        />
                      </div>
                      <div>
                        <Label htmlFor="tenantEmail" className="text-sm font-medium">Email Address</Label>
                        <Input
                          id="tenantEmail"
                          type="email"
                          value={formData.tenantEmail}
                          onChange={(e) => handleInputChange('tenantEmail', e.target.value)}
                          placeholder="tenant@example.com"
                          className="mt-1"
                        />
                      </div>
                      <div>
                        <Label htmlFor="tenantPhone" className="text-sm font-medium">Phone Number</Label>
                        <Input
                          id="tenantPhone"
                          value={formData.tenantPhone}
                          onChange={(e) => handleInputChange('tenantPhone', e.target.value)}
                          placeholder="(555) 123-4567"
                          className="mt-1"
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* üè† Property Details */}
            <Card className="border-blue-200">
              <CardHeader className="pb-4 bg-blue-50">
                <CardTitle className="flex items-center gap-2 text-lg text-blue-700">
                  <MapPin className="w-5 h-5" />
                  üè† Property Details
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4 pt-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div className="sm:col-span-2">
                    <Label htmlFor="propertyAddress" className="text-sm font-medium">Property Address *</Label>
                    <Input
                      id="propertyAddress"
                      value={formData.propertyAddress}
                      onChange={(e) => handleInputChange('propertyAddress', e.target.value)}
                      placeholder="123 Main Street, City, State 12345"
                      required
                      className="mt-1"
                    />
                  </div>
                  <div>
                    <Label htmlFor="unitNumber" className="text-sm font-medium">Unit Number (Optional)</Label>
                    <Input
                      id="unitNumber"
                      value={formData.unitNumber}
                      onChange={(e) => handleInputChange('unitNumber', e.target.value)}
                      placeholder="Apt 2B, Unit 5, etc."
                      className="mt-1"
                    />
                  </div>
                  <div>
                    <Label htmlFor="rentDueDate" className="text-sm font-medium">Rent Due Date</Label>
                    <Select value={formData.rentDueDate} onValueChange={(value) => handleInputChange('rentDueDate', value)}>
                      <SelectTrigger className="mt-1">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="max-h-48 overflow-y-auto bg-white z-50">
                        {Array.from({ length: 31 }, (_, i) => (
                          <SelectItem key={i + 1} value={String(i + 1)}>
                            {i + 1}{i === 0 ? 'st' : i === 1 ? 'nd' : i === 2 ? 'rd' : 'th'} of each month
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label htmlFor="leaseStartDate" className="text-sm font-medium">Lease Start Date *</Label>
                    <Input
                      id="leaseStartDate"
                      type="date"
                      value={formData.leaseStartDate}
                      onChange={(e) => handleInputChange('leaseStartDate', e.target.value)}
                      required
                      className="mt-1"
                    />
                  </div>
                  <div>
                    <Label htmlFor="leaseEndDate" className="text-sm font-medium">Lease End Date *</Label>
                    <Input
                      id="leaseEndDate"
                      type="date"
                      value={formData.leaseEndDate}
                      onChange={(e) => handleInputChange('leaseEndDate', e.target.value)}
                      required
                      className="mt-1"
                    />
                  </div>
                  <div>
                    <Label htmlFor="monthlyRent" className="text-sm font-medium">Monthly Rent ($) *</Label>
                    <Input
                      id="monthlyRent"
                      type="number"
                      value={formData.monthlyRent}
                      onChange={(e) => handleInputChange('monthlyRent', e.target.value)}
                      placeholder="2000"
                      required
                      className="mt-1"
                    />
                  </div>
                  <div>
                    <Label htmlFor="securityDeposit" className="text-sm font-medium">Security Deposit ($) *</Label>
                    <Input
                      id="securityDeposit"
                      type="number"
                      value={formData.securityDeposit}
                      onChange={(e) => handleInputChange('securityDeposit', e.target.value)}
                      placeholder="2000"
                      required
                      className="mt-1"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* üí° Utilities & Charges */}
            <Card className="border-orange-200">
              <CardHeader className="pb-4 bg-orange-50">
                <CardTitle className="flex items-center gap-2 text-lg text-orange-700">
                  <Zap className="w-5 h-5" />
                  üí° Utilities & Charges
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4 pt-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  {[
                    { field: 'waterPaidBy', label: 'Water' },
                    { field: 'electricityPaidBy', label: 'Electricity' },
                    { field: 'gasPaidBy', label: 'Gas' },
                    { field: 'internetPaidBy', label: 'Internet' }
                  ].map(({ field, label }) => (
                    <div key={field}>
                      <Label className="text-sm font-medium">{label} paid by:</Label>
                      <Select 
                        value={formData[field as keyof typeof formData] as string} 
                        onValueChange={(value) => handleInputChange(field, value)}
                      >
                        <SelectTrigger className="mt-1">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent className="bg-white z-50">
                          <SelectItem value="tenant">Tenant</SelectItem>
                          <SelectItem value="landlord">Landlord</SelectItem>
                          <SelectItem value="shared">Shared 50/50</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  ))}
                </div>
                
                <Separator className="my-6" />
                
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                  <div>
                    <Label htmlFor="parkingCharges" className="text-sm font-medium">Parking Charges ($)</Label>
                    <Input
                      id="parkingCharges"
                      type="number"
                      value={formData.parkingCharges}
                      onChange={(e) => handleInputChange('parkingCharges', e.target.value)}
                      placeholder="0"
                      className="mt-1"
                    />
                  </div>
                  <div>
                    <Label htmlFor="storageCharges" className="text-sm font-medium">Storage Charges ($)</Label>
                    <Input
                      id="storageCharges"
                      type="number"
                      value={formData.storageCharges}
                      onChange={(e) => handleInputChange('storageCharges', e.target.value)}
                      placeholder="0"
                      className="mt-1"
                    />
                  </div>
                  <div>
                    <Label htmlFor="lateFeeAmount" className="text-sm font-medium">Late Fee Amount ($)</Label>
                    <Input
                      id="lateFeeAmount"
                      type="number"
                      value={formData.lateFeeAmount}
                      onChange={(e) => handleInputChange('lateFeeAmount', e.target.value)}
                      placeholder="50"
                      className="mt-1"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* üìã Terms & Conditions */}
            <Card className="border-purple-200">
              <CardHeader className="pb-4 bg-purple-50">
                <CardTitle className="flex items-center gap-2 text-lg text-purple-700">
                  <FileText className="w-5 h-5" />
                  üìã Terms & Conditions
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4 pt-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <Label className="text-sm font-medium">Lease Type</Label>
                    <Select value={formData.leaseType} onValueChange={(value) => handleInputChange('leaseType', value)}>
                      <SelectTrigger className="mt-1">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="bg-white z-50">
                        <SelectItem value="fixed">Fixed Term</SelectItem>
                        <SelectItem value="month-to-month">Month-to-Month</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <Label htmlFor="moveOutNotice" className="text-sm font-medium">Move-out Notice Period (days)</Label>
                    <Input
                      id="moveOutNotice"
                      type="number"
                      value={formData.moveOutNotice}
                      onChange={(e) => handleInputChange('moveOutNotice', e.target.value)}
                      placeholder="30"
                      className="mt-1"
                    />
                  </div>
                </div>
                
                <div>
                  <Label htmlFor="governingLaw" className="text-sm font-medium">Governing Law (State)</Label>
                  <Select value={formData.governingLaw} onValueChange={(value) => handleInputChange('governingLaw', value)}>
                    <SelectTrigger className="mt-1">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent className="max-h-48 overflow-y-auto bg-white z-50">
                      {stateOptions.map((state) => (
                        <SelectItem key={state} value={state}>{state}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="flex items-center space-x-2 pt-2">
                  <Checkbox 
                    id="petPolicy"
                    checked={formData.petPolicy}
                    onCheckedChange={(checked) => handleInputChange('petPolicy', checked as boolean)}
                  />
                  <Label htmlFor="petPolicy" className="text-sm font-medium">Pets allowed (subject to additional terms)</Label>
                </div>
                
                <div>
                  <Label htmlFor="maintenanceResponsibilities" className="text-sm font-medium">Maintenance Responsibilities (Optional)</Label>
                  <Textarea
                    id="maintenanceResponsibilities"
                    value={formData.maintenanceResponsibilities}
                    onChange={(e) => handleInputChange('maintenanceResponsibilities', e.target.value)}
                    placeholder="Describe specific maintenance responsibilities for both landlord and tenant..."
                    className="mt-1 min-h-[100px]"
                  />
                </div>
              </CardContent>
            </Card>

            {/* üñäÔ∏è Signatures Note */}
            <Card className="border-indigo-200">
              <CardHeader className="pb-4 bg-indigo-50">
                <CardTitle className="flex items-center gap-2 text-lg text-indigo-700">
                  <PenTool className="w-5 h-5" />
                  üñäÔ∏è Digital Signatures
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-6">
                <div className="bg-indigo-50 border border-indigo-200 rounded-lg p-4">
                  <p className="text-sm text-indigo-700">
                    <strong>Digital signing features included:</strong>
                  </p>
                  <ul className="text-sm text-indigo-600 mt-2 space-y-1">
                    <li>‚Ä¢ Signature boxes for both landlord and tenant</li>
                    <li>‚Ä¢ Type, draw, or upload signature options</li>
                    <li>‚Ä¢ Automatic signing date recording</li>
                    <li>‚Ä¢ Professional formatting with landlord logo placement</li>
                  </ul>
                </div>
              </CardContent>
            </Card>
          </form>
        </div>

        <Separator />

        <div className="flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-4 p-4 sm:p-6 flex-shrink-0 bg-gray-50">
          <div className="text-sm text-gray-600">
            <span className="font-medium">Professional Series</span> ‚Äî Complete lease agreement builder
          </div>
          <div className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3">
            <Button type="button" variant="outline" onClick={onClose} className="text-sm">
              Cancel
            </Button>
            <Button 
              onClick={handleSubmit} 
              className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white text-sm font-medium"
            >
              Generate Professional Contract
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};
