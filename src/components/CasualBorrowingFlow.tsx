import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { CalendarIcon, Coffee, User, Calendar, FileText, Download, Mail } from 'lucide-react';
import { generateEnhancedPdf } from '@/utils/enhancedPdfGenerator';
import { useToast } from '@/hooks/use-toast';

interface CasualBorrowingFlowProps {
  isOpen: boolean;
  onClose: () => void;
}

export const CasualBorrowingFlow = ({ isOpen, onClose }: CasualBorrowingFlowProps) => {
  const [lenderName, setLenderName] = useState('');
  const [borrowerName, setBorrowerName] = useState('');
  const [item, setItem] = useState('');
  const [borrowDate, setBorrowDate] = useState('');
  const [returnDate, setReturnDate] = useState('');
  const [itemCondition, setItemCondition] = useState('');
  const [optionalMessage, setOptionalMessage] = useState('');
  const [showPreview, setShowPreview] = useState(false);
  const { toast } = useToast();

  const handleGenerateContract = () => {
    if (!lenderName || !borrowerName || !item || !borrowDate || !returnDate) {
      alert('Please fill in all required fields');
      return;
    }
    setShowPreview(true);
  };

  const generateContract = () => {
    const today = new Date().toLocaleDateString();
    
    return `CASUAL BORROWING AGREEMENT

This agreement is made on ${today} between:

LENDER: ${lenderName}
BORROWER: ${borrowerName}

üì± ITEM DETAILS:
Item: ${item}
Borrow Date: ${borrowDate}
Return Date: ${returnDate}
${itemCondition ? `Item Condition: ${itemCondition}` : ''}

üìã TERMS:
1. The borrower agrees to return the item by ${returnDate} in the same condition it was borrowed.
2. The borrower is responsible for any damage or loss during the borrowing period.
3. If the item is not returned by the agreed date, the lender may request immediate return.
4. Both parties agree to communicate openly about any issues with the borrowed item.

${optionalMessage ? `üíå SPECIAL MESSAGE:\n"${optionalMessage}"` : ''}

üñäÔ∏è DIGITAL SIGNATURES:
Lender: ${lenderName}
Date: ${today}

Borrower: ${borrowerName}
Date: ${today}

---
Generated by GenContract AI ‚Äî Because even casual borrowing deserves clarity! üìù`;
  };

  const handleDownloadPDF = () => {
    const contract = generateContract();
    
    // Use enhanced PDF generator with casual borrowing styling
    const pdf = generateEnhancedPdf({
      contractType: 'casualBorrowing',
      contractData: {
        ownerName: lenderName,
        borrowerName: borrowerName,
        item,
        borrowDate,
        returnDate,
        itemCondition,
        optionalMessage
      },
      contract,
      template: 'modern'
    });
    
    pdf.save(`Casual_Borrowing_Agreement_${item.replace(/[^a-zA-Z0-9]/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`);
    
    toast({
      title: "Enhanced PDF Downloaded! üîÑ",
      description: "Your beautifully styled casual borrowing agreement has been downloaded!",
    });
  };

  const resetForm = () => {
    setLenderName('');
    setBorrowerName('');
    setItem('');
    setBorrowDate('');
    setReturnDate('');
    setItemCondition('');
    setOptionalMessage('');
    setShowPreview(false);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-2xl">
            <Coffee className="w-6 h-6 text-indigo-600" />
            Casual Borrowing Agreement
          </DialogTitle>
        </DialogHeader>

        {!showPreview ? (
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <User className="w-5 h-5" />
                  People Involved
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="lenderName">Lender Name *</Label>
                    <Input
                      id="lenderName"
                      value={lenderName}
                      onChange={(e) => setLenderName(e.target.value)}
                      placeholder="Who owns the item?"
                    />
                  </div>
                  <div>
                    <Label htmlFor="borrowerName">Borrower Name *</Label>
                    <Input
                      id="borrowerName"
                      value={borrowerName}
                      onChange={(e) => setBorrowerName(e.target.value)}
                      placeholder="Who's borrowing it?"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <FileText className="w-5 h-5" />
                  Item Details
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="item">Item Being Borrowed *</Label>
                  <Input
                    id="item"
                    value={item}
                    onChange={(e) => setItem(e.target.value)}
                    placeholder="e.g., laptop, book, hoodie, charger"
                  />
                </div>
                <div>
                  <Label htmlFor="itemCondition">Item Condition (optional)</Label>
                  <Input
                    id="itemCondition"
                    value={itemCondition}
                    onChange={(e) => setItemCondition(e.target.value)}
                    placeholder="e.g., Good condition, small scratch on back"
                  />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Calendar className="w-5 h-5" />
                  Timeline
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="borrowDate">Borrow Date *</Label>
                    <Input
                      id="borrowDate"
                      type="date"
                      value={borrowDate}
                      onChange={(e) => setBorrowDate(e.target.value)}
                    />
                  </div>
                  <div>
                    <Label htmlFor="returnDate">Return Date *</Label>
                    <Input
                      id="returnDate"
                      type="date"
                      value={returnDate}
                      onChange={(e) => setReturnDate(e.target.value)}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Optional Message</CardTitle>
              </CardHeader>
              <CardContent>
                <Textarea
                  value={optionalMessage}
                  onChange={(e) => setOptionalMessage(e.target.value)}
                  placeholder="e.g., 'Take care of it, please!' or 'It's my favorite book!'"
                  rows={3}
                />
              </CardContent>
            </Card>

            <div className="flex gap-3">
              <Button onClick={handleGenerateContract} className="flex-1">
                Generate Contract üìù
              </Button>
              <Button variant="outline" onClick={onClose}>
                Cancel
              </Button>
            </div>
          </div>
        ) : (
          <div className="space-y-6">
            <div className="flex gap-3 mb-4">
              <Button onClick={handleDownloadPDF} className="flex items-center gap-2 bg-gradient-to-r from-pink-500 to-pink-600 text-white hover:from-pink-600 hover:to-pink-700">
                <Download className="w-4 h-4" />
                Download Enhanced PDF
              </Button>
              <Button variant="outline" onClick={() => setShowPreview(false)}>
                Edit Details
              </Button>
              <Button variant="outline" onClick={resetForm}>
                New Agreement
              </Button>
            </div>

            <Card>
              <CardHeader>
                <CardTitle className="text-center">üìù Contract Preview</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="bg-gray-50 p-6 rounded-lg border">
                  <pre className="whitespace-pre-wrap text-sm leading-relaxed font-mono">
                    {generateContract()}
                  </pre>
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
};
