
import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Package, User, DollarSign, Calendar, Shield } from 'lucide-react';

interface ProfessionalStorageFormProps {
  isOpen: boolean;
  onClose: () => void;
  onContractGenerate: (contractData: any) => void;
}

export const ProfessionalStorageForm = ({ isOpen, onClose, onContractGenerate }: ProfessionalStorageFormProps) => {
  const [formData, setFormData] = useState({
    // Storage Facility Information
    facilityName: '',
    facilityAddress: '',
    facilityEmail: '',
    facilityPhone: '',
    managementCompany: '',
    facilityHours: '',
    
    // Customer Information
    customerName: '',
    customerAddress: '',
    customerEmail: '',
    customerPhone: '',
    emergencyContact: '',
    emergencyPhone: '',
    
    // Storage Unit Details
    unitNumber: '',
    unitSize: '',
    unitType: '',
    unitLocation: '',
    accessCode: '',
    keyQuantity: '',
    
    // Lease Terms
    startDate: '',
    leaseType: '',
    monthlyRate: '',
    securityDeposit: '',
    adminFee: '',
    proRatedAmount: '',
    
    // Payment Information
    paymentMethod: '',
    autopayAuthorized: false,
    lateFee: '',
    lateGracePeriod: '',
    
    // Access & Security
    accessHours: '',
    securityFeatures: '',
    climateControlled: false,
    insuranceRequired: false,
    insuranceAmount: '',
    
    // Rules & Regulations
    prohibitedItems: '',
    accessRules: '',
    notificationRequirements: '',
    
    // Legal Terms
    defaultTerms: '',
    evictionProcess: '',
    governingLaw: '',
    
    // Additional Services
    movingServices: false,
    packingSupplies: false,
    truckRental: false,
    additionalNotes: ''
  });

  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSubmit = () => {
    const contractData = {
      contractType: 'storage',
      template: 'professional',
      organizationData: {
        name: formData.facilityName,
        address: formData.facilityAddress,
        email: formData.facilityEmail,
        phone: formData.facilityPhone,
        logo: ''
      },
      dynamicFields: {
        ...formData,
        jurisdiction: formData.governingLaw
      },
      language: 'en',
      footerText: 'Generated by GenContract â€” Professional Series'
    };

    onContractGenerate(contractData);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-2xl">
            <Package className="w-6 h-6 text-red-600" />
            Professional Storage Container Lease
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* Storage Facility Information */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Package className="w-5 h-5" />
                Storage Facility Information
              </CardTitle>
            </CardHeader>
            <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="facilityName">Facility Name *</Label>
                <Input
                  id="facilityName"
                  value={formData.facilityName}
                  onChange={(e) => handleInputChange('facilityName', e.target.value)}
                  placeholder="SecureStore Storage Facility"
                />
              </div>
              <div>
                <Label htmlFor="managementCompany">Management Company</Label>
                <Input
                  id="managementCompany"
                  value={formData.managementCompany}
                  onChange={(e) => handleInputChange('managementCompany', e.target.value)}
                  placeholder="Storage Management LLC"
                />
              </div>
              <div className="md:col-span-2">
                <Label htmlFor="facilityAddress">Facility Address *</Label>
                <Input
                  id="facilityAddress"
                  value={formData.facilityAddress}
                  onChange={(e) => handleInputChange('facilityAddress', e.target.value)}
                  placeholder="123 Storage Lane, City, State 12345"
                />
              </div>
              <div>
                <Label htmlFor="facilityEmail">Contact Email *</Label>
                <Input
                  id="facilityEmail"
                  type="email"
                  value={formData.facilityEmail}
                  onChange={(e) => handleInputChange('facilityEmail', e.target.value)}
                  placeholder="info@securestore.com"
                />
              </div>
              <div>
                <Label htmlFor="facilityPhone">Contact Phone *</Label>
                <Input
                  id="facilityPhone"
                  value={formData.facilityPhone}
                  onChange={(e) => handleInputChange('facilityPhone', e.target.value)}
                  placeholder="(555) 123-4567"
                />
              </div>
              <div className="md:col-span-2">
                <Label htmlFor="facilityHours">Facility Hours</Label>
                <Input
                  id="facilityHours"
                  value={formData.facilityHours}
                  onChange={(e) => handleInputChange('facilityHours', e.target.value)}
                  placeholder="Monday-Sunday: 6:00 AM - 10:00 PM"
                />
              </div>
            </CardContent>
          </Card>

          {/* Customer Information */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <User className="w-5 h-5" />
                Customer Information
              </CardTitle>
            </CardHeader>
            <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="customerName">Customer Name *</Label>
                <Input
                  id="customerName"
                  value={formData.customerName}
                  onChange={(e) => handleInputChange('customerName', e.target.value)}
                  placeholder="John Smith"
                />
              </div>
              <div>
                <Label htmlFor="customerEmail">Email Address *</Label>
                <Input
                  id="customerEmail"
                  type="email"
                  value={formData.customerEmail}
                  onChange={(e) => handleInputChange('customerEmail', e.target.value)}
                  placeholder="john@email.com"
                />
              </div>
              <div>
                <Label htmlFor="customerPhone">Phone Number *</Label>
                <Input
                  id="customerPhone"
                  value={formData.customerPhone}
                  onChange={(e) => handleInputChange('customerPhone', e.target.value)}
                  placeholder="(555) 987-6543"
                />
              </div>
              <div>
                <Label htmlFor="emergencyContact">Emergency Contact</Label>
                <Input
                  id="emergencyContact"
                  value={formData.emergencyContact}
                  onChange={(e) => handleInputChange('emergencyContact', e.target.value)}
                  placeholder="Jane Smith"
                />
              </div>
              <div className="md:col-span-2">
                <Label htmlFor="customerAddress">Customer Address *</Label>
                <Input
                  id="customerAddress"
                  value={formData.customerAddress}
                  onChange={(e) => handleInputChange('customerAddress', e.target.value)}
                  placeholder="456 Customer St, City, State 12345"
                />
              </div>
              <div>
                <Label htmlFor="emergencyPhone">Emergency Contact Phone</Label>
                <Input
                  id="emergencyPhone"
                  value={formData.emergencyPhone}
                  onChange={(e) => handleInputChange('emergencyPhone', e.target.value)}
                  placeholder="(555) 111-2222"
                />
              </div>
            </CardContent>
          </Card>

          {/* Storage Unit Details */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Package className="w-5 h-5" />
                Storage Unit Details
              </CardTitle>
            </CardHeader>
            <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="unitNumber">Unit Number *</Label>
                <Input
                  id="unitNumber"
                  value={formData.unitNumber}
                  onChange={(e) => handleInputChange('unitNumber', e.target.value)}
                  placeholder="A-123"
                />
              </div>
              <div>
                <Label htmlFor="unitSize">Unit Size *</Label>
                <Select value={formData.unitSize} onValueChange={(value) => handleInputChange('unitSize', value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select unit size" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="5x5">5x5 feet</SelectItem>
                    <SelectItem value="5x10">5x10 feet</SelectItem>
                    <SelectItem value="10x10">10x10 feet</SelectItem>
                    <SelectItem value="10x15">10x15 feet</SelectItem>
                    <SelectItem value="10x20">10x20 feet</SelectItem>
                    <SelectItem value="10x30">10x30 feet</SelectItem>
                    <SelectItem value="other">Other</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="unitType">Unit Type</Label>
                <Select value={formData.unitType} onValueChange={(value) => handleInputChange('unitType', value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select unit type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="standard">Standard</SelectItem>
                    <SelectItem value="climate-controlled">Climate Controlled</SelectItem>
                    <SelectItem value="drive-up">Drive-Up Access</SelectItem>
                    <SelectItem value="indoor">Indoor</SelectItem>
                    <SelectItem value="outdoor">Outdoor</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="unitLocation">Unit Location</Label>
                <Input
                  id="unitLocation"
                  value={formData.unitLocation}
                  onChange={(e) => handleInputChange('unitLocation', e.target.value)}
                  placeholder="Building A, Floor 1"
                />
              </div>
              <div>
                <Label htmlFor="accessCode">Access Code</Label>
                <Input
                  id="accessCode"
                  value={formData.accessCode}
                  onChange={(e) => handleInputChange('accessCode', e.target.value)}
                  placeholder="Will be provided upon move-in"
                />
              </div>
              <div>
                <Label htmlFor="keyQuantity">Number of Keys/Access Cards</Label>
                <Input
                  id="keyQuantity"
                  value={formData.keyQuantity}
                  onChange={(e) => handleInputChange('keyQuantity', e.target.value)}
                  placeholder="2"
                />
              </div>
            </CardContent>
          </Card>

          {/* Lease Terms */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Calendar className="w-5 h-5" />
                Lease Terms & Pricing
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="startDate">Lease Start Date *</Label>
                  <Input
                    id="startDate"
                    type="date"
                    value={formData.startDate}
                    onChange={(e) => handleInputChange('startDate', e.target.value)}
                  />
                </div>
                <div>
                  <Label htmlFor="leaseType">Lease Type *</Label>
                  <Select value={formData.leaseType} onValueChange={(value) => handleInputChange('leaseType', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select lease type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="month-to-month">Month-to-Month</SelectItem>
                      <SelectItem value="6-months">6 Months</SelectItem>
                      <SelectItem value="12-months">12 Months</SelectItem>
                      <SelectItem value="24-months">24 Months</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="monthlyRate">Monthly Rate *</Label>
                  <Input
                    id="monthlyRate"
                    value={formData.monthlyRate}
                    onChange={(e) => handleInputChange('monthlyRate', e.target.value)}
                    placeholder="150.00"
                  />
                </div>
                <div>
                  <Label htmlFor="securityDeposit">Security Deposit</Label>
                  <Input
                    id="securityDeposit"
                    value={formData.securityDeposit}
                    onChange={(e) => handleInputChange('securityDeposit', e.target.value)}
                    placeholder="150.00"
                  />
                </div>
                <div>
                  <Label htmlFor="adminFee">Administrative Fee</Label>
                  <Input
                    id="adminFee"
                    value={formData.adminFee}
                    onChange={(e) => handleInputChange('adminFee', e.target.value)}
                    placeholder="25.00"
                  />
                </div>
                <div>
                  <Label htmlFor="proRatedAmount">Pro-rated First Month</Label>
                  <Input
                    id="proRatedAmount"
                    value={formData.proRatedAmount}
                    onChange={(e) => handleInputChange('proRatedAmount', e.target.value)}
                    placeholder="75.00"
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Payment Information */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <DollarSign className="w-5 h-5" />
                Payment Information
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="paymentMethod">Payment Method</Label>
                  <Select value={formData.paymentMethod} onValueChange={(value) => handleInputChange('paymentMethod', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select payment method" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="credit-card">Credit Card</SelectItem>
                      <SelectItem value="bank-transfer">Bank Transfer</SelectItem>
                      <SelectItem value="check">Check</SelectItem>
                      <SelectItem value="cash">Cash</SelectItem>
                      <SelectItem value="autopay">Auto-Pay</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="lateFee">Late Fee Amount</Label>
                  <Input
                    id="lateFee"
                    value={formData.lateFee}
                    onChange={(e) => handleInputChange('lateFee', e.target.value)}
                    placeholder="25.00"
                  />
                </div>
                <div>
                  <Label htmlFor="lateGracePeriod">Late Payment Grace Period (days)</Label>
                  <Input
                    id="lateGracePeriod"
                    value={formData.lateGracePeriod}
                    onChange={(e) => handleInputChange('lateGracePeriod', e.target.value)}
                    placeholder="5"
                  />
                </div>
              </div>

              <div className="flex items-center space-x-2">
                <Checkbox
                  checked={formData.autopayAuthorized}
                  onCheckedChange={(checked) => handleInputChange('autopayAuthorized', checked)}
                />
                <Label>Auto-Pay Authorized</Label>
              </div>
            </CardContent>
          </Card>

          {/* Access & Security */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Shield className="w-5 h-5" />
                Access & Security
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="accessHours">Access Hours</Label>
                  <Input
                    id="accessHours"
                    value={formData.accessHours}
                    onChange={(e) => handleInputChange('accessHours', e.target.value)}
                    placeholder="24/7 Access"
                  />
                </div>
                <div>
                  <Label htmlFor="insuranceAmount">Insurance Amount (if required)</Label>
                  <Input
                    id="insuranceAmount"
                    value={formData.insuranceAmount}
                    onChange={(e) => handleInputChange('insuranceAmount', e.target.value)}
                    placeholder="5000"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <div className="flex items-center space-x-2">
                  <Checkbox
                    checked={formData.climateControlled}
                    onCheckedChange={(checked) => handleInputChange('climateControlled', checked)}
                  />
                  <Label>Climate Controlled Unit</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox
                    checked={formData.insuranceRequired}
                    onCheckedChange={(checked) => handleInputChange('insuranceRequired', checked)}
                  />
                  <Label>Insurance Required</Label>
                </div>
              </div>

              <div>
                <Label htmlFor="securityFeatures">Security Features</Label>
                <Textarea
                  id="securityFeatures"
                  value={formData.securityFeatures}
                  onChange={(e) => handleInputChange('securityFeatures', e.target.value)}
                  placeholder="â€¢ 24/7 video surveillance&#10;â€¢ Gated access with keypad&#10;â€¢ Individual unit alarms&#10;â€¢ On-site security"
                  rows={4}
                />
              </div>

              <div>
                <Label htmlFor="accessRules">Access Rules & Procedures</Label>
                <Textarea
                  id="accessRules"
                  value={formData.accessRules}
                  onChange={(e) => handleInputChange('accessRules', e.target.value)}
                  placeholder="Access rules, guest policy, and facility procedures..."
                  rows={3}
                />
              </div>
            </CardContent>
          </Card>

          {/* Rules & Legal Terms */}
          <Card>
            <CardHeader>
              <CardTitle>Rules, Regulations & Legal Terms</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="prohibitedItems">Prohibited Items</Label>
                <Textarea
                  id="prohibitedItems"
                  value={formData.prohibitedItems}
                  onChange={(e) => handleInputChange('prohibitedItems', e.target.value)}
                  placeholder="â€¢ Hazardous materials&#10;â€¢ Perishable items&#10;â€¢ Living things&#10;â€¢ Illegal items&#10;â€¢ Flammable liquids"
                  rows={4}
                />
              </div>

              <div>
                <Label htmlFor="defaultTerms">Default & Eviction Terms</Label>
                <Textarea
                  id="defaultTerms"
                  value={formData.defaultTerms}
                  onChange={(e) => handleInputChange('defaultTerms', e.target.value)}
                  placeholder="Terms regarding late payments, default, and lien process..."
                  rows={3}
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="governingLaw">Governing Law *</Label>
                  <Input
                    id="governingLaw"
                    value={formData.governingLaw}
                    onChange={(e) => handleInputChange('governingLaw', e.target.value)}
                    placeholder="State of California"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label>Additional Services Available</Label>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      checked={formData.movingServices}
                      onCheckedChange={(checked) => handleInputChange('movingServices', checked)}
                    />
                    <Label>Moving Services</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      checked={formData.packingSupplies}
                      onCheckedChange={(checked) => handleInputChange('packingSupplies', checked)}
                    />
                    <Label>Packing Supplies</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      checked={formData.truckRental}
                      onCheckedChange={(checked) => handleInputChange('truckRental', checked)}
                    />
                    <Label>Truck Rental</Label>
                  </div>
                </div>
              </div>

              <div>
                <Label htmlFor="additionalNotes">Additional Notes & Terms</Label>
                <Textarea
                  id="additionalNotes"
                  value={formData.additionalNotes}
                  onChange={(e) => handleInputChange('additionalNotes', e.target.value)}
                  placeholder="Any additional terms, special conditions, or notes..."
                  rows={4}
                />
              </div>
            </CardContent>
          </Card>

          {/* Action Buttons */}
          <div className="flex gap-4 pt-4">
            <Button onClick={onClose} variant="outline" className="flex-1">
              Cancel
            </Button>
            <Button onClick={handleSubmit} className="flex-1 bg-red-600 hover:bg-red-700">
              Generate Storage Lease Agreement
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};
