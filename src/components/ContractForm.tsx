import { useState, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { useToast } from '@/hooks/use-toast';
import { Organization } from '@/types';
import { useOrganization } from '@/hooks/use-organization';
import { TemplateSelector } from './TemplateSelector';
import { Languages } from '@/constants';

interface ContractFormProps {
  onContractGenerate: (contractData: any) => void;
  isGenerating: boolean;
}

export const ContractForm = ({ onContractGenerate, isGenerating }: ContractFormProps) => {
  const [contractType, setContractType] = useState<string>('');
  const [dynamicFields, setDynamicFields] = useState<{ [key: string]: string }>({});
  const [language, setLanguage] = useState<string>('en');
  const [template, setTemplate] = useState<string>('modern');
  const [footerText, setFooterText] = useState<string>('Generated by GenContract AI');
  const [savedOrgData, setSavedOrgData] = useState<Organization | null>(null);
  const { organization, saveOrganization, clearOrganization } = useOrganization();
  const { toast } = useToast();

  const [organizationData, setOrganizationData] = useState<Organization>({
    name: '',
    address: '',
    email: '',
    phone: '',
    logo: '',
  });

  useEffect(() => {
    if (organization) {
      setOrganizationData(organization);
      setSavedOrgData(organization);
    }
  }, [organization]);

  const handleDynamicFieldChange = (field: string, value: string) => {
    setDynamicFields(prev => ({ ...prev, [field]: value }));
  };

  const handleOrgDataChange = (field: keyof Organization, value: string) => {
    setOrganizationData(prev => ({ ...prev, [field]: value }));
  };

  const handleSaveOrgInfo = async () => {
    try {
      await saveOrganization(organizationData);
      toast({
        title: "Organization Info Saved",
        description: "Your organization information has been saved successfully.",
      });
    } catch (error) {
      toast({
        title: "Save Failed",
        description: "Failed to save organization information.",
        variant: "destructive"
      });
    }
  };

  const handleClearOrgInfo = async () => {
    try {
      await clearOrganization();
      setOrganizationData({ name: '', address: '', email: '', phone: '', logo: '' });
      setSavedOrgData(null);
      toast({
        title: "Organization Info Cleared",
        description: "Your organization information has been cleared.",
      });
    } catch (error) {
      toast({
        title: "Clear Failed",
        description: "Failed to clear organization information.",
        variant: "destructive"
      });
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!contractType) {
      toast({
        title: "Contract Type Required",
        description: "Please select a contract type to continue.",
        variant: "destructive"
      });
      return;
    }

    const contractData = {
      contractType,
      organizationData,
      dynamicFields,
      language,
      template, // Make sure template is included in contract data
      footerText,
      reusedOrgInfo: !!savedOrgData
    };

    console.log('Contract data being sent:', contractData);
    onContractGenerate(contractData);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {/* Contract Type */}
      <div>
        <Label htmlFor="contractType" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed">
          Contract Type *
        </Label>
        <Select value={contractType} onValueChange={setContractType}>
          <SelectTrigger className="bg-white">
            <SelectValue placeholder="Select contract type" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="rental">Rental Agreement</SelectItem>
            <SelectItem value="jobOffer">Job Offer Letter</SelectItem>
            <SelectItem value="business">Business Agreement</SelectItem>
            <SelectItem value="carRental">Car Rental Contract</SelectItem>
            <SelectItem value="storage">Storage Container Lease</SelectItem>
            <SelectItem value="nda">Non-Disclosure Agreement (NDA)</SelectItem>
            <SelectItem value="freelance">Freelance/Service Agreement</SelectItem>
            <SelectItem value="employment">Employment Contract</SelectItem>
            <SelectItem value="partnership">Partnership Agreement</SelectItem>
            <SelectItem value="consulting">Consulting Agreement</SelectItem>
            <SelectItem value="license">License Agreement</SelectItem>
          </SelectContent>
        </Select>
      </div>

      {/* Dynamic Fields - based on contract type */}
      {contractType === 'rental' && (
        <div className="space-y-2">
          <Label htmlFor="tenant" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed">
            Tenant Name *
          </Label>
          <Input
            type="text"
            id="tenant"
            placeholder="Enter tenant name"
            value={dynamicFields.tenant || ''}
            onChange={(e) => handleDynamicFieldChange('tenant', e.target.value)}
          />
        </div>
      )}

      {contractType === 'jobOffer' && (
        <div className="space-y-2">
          <Label htmlFor="candidate" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed">
            Candidate Name *
          </Label>
          <Input
            type="text"
            id="candidate"
            placeholder="Enter candidate name"
            value={dynamicFields.candidate || ''}
            onChange={(e) => handleDynamicFieldChange('candidate', e.target.value)}
          />
        </div>
      )}

      {contractType === 'business' && (
        <div className="space-y-2">
          <Label htmlFor="party2" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed">
            Second Party Name *
          </Label>
          <Input
            type="text"
            id="party2"
            placeholder="Enter second party name"
            value={dynamicFields.party2 || ''}
            onChange={(e) => handleDynamicFieldChange('party2', e.target.value)}
          />
        </div>
      )}

      {contractType === 'carRental' && (
        <div className="space-y-2">
          <Label htmlFor="renter" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed">
            Renter Name *
          </Label>
          <Input
            type="text"
            id="renter"
            placeholder="Enter renter name"
            value={dynamicFields.renter || ''}
            onChange={(e) => handleDynamicFieldChange('renter', e.target.value)}
          />
        </div>
      )}

      {/* Organization Information */}
      <div className="border rounded-md p-4 bg-gray-50">
        <h4 className="text-sm font-semibold mb-3">Organization Information</h4>
        <div className="space-y-3">
          <div>
            <Label htmlFor="orgName" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed">
              Organization Name *
            </Label>
            <Input
              type="text"
              id="orgName"
              placeholder="Enter organization name"
              value={organizationData.name}
              onChange={(e) => handleOrgDataChange('name', e.target.value)}
            />
          </div>
          <div>
            <Label htmlFor="orgAddress" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed">
              Address
            </Label>
            <Input
              type="text"
              id="orgAddress"
              placeholder="Enter address"
              value={organizationData.address}
              onChange={(e) => handleOrgDataChange('address', e.target.value)}
            />
          </div>
          <div>
            <Label htmlFor="orgEmail" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed">
              Email
            </Label>
            <Input
              type="email"
              id="orgEmail"
              placeholder="Enter email"
              value={organizationData.email}
              onChange={(e) => handleOrgDataChange('email', e.target.value)}
            />
          </div>
          <div>
            <Label htmlFor="orgPhone" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed">
              Phone
            </Label>
            <Input
              type="tel"
              id="orgPhone"
              placeholder="Enter phone number"
              value={organizationData.phone}
              onChange={(e) => handleOrgDataChange('phone', e.target.value)}
            />
          </div>
          <div>
            <Label htmlFor="orgLogo" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed">
              Logo URL
            </Label>
            <Input
              type="url"
              id="orgLogo"
              placeholder="Enter logo URL"
              value={organizationData.logo}
              onChange={(e) => handleOrgDataChange('logo', e.target.value)}
            />
          </div>
        </div>
        <div className="flex justify-between mt-4">
          {savedOrgData ? (
            <Button type="button" variant="destructive" size="sm" onClick={handleClearOrgInfo}>
              Clear Info
            </Button>
          ) : (
            <Button type="button" variant="secondary" size="sm" onClick={handleSaveOrgInfo}>
              Save Info
            </Button>
          )}
          <div className="flex items-center space-x-2">
            <Label htmlFor="reuseOrgInfo" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed">
              Reuse Info
            </Label>
            <Switch id="reuseOrgInfo" checked={!!savedOrgData} disabled />
          </div>
        </div>
      </div>

      {/* Language Selection */}
      <div>
        <Label htmlFor="language" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed">
          Language
        </Label>
        <Select value={language} onValueChange={setLanguage}>
          <SelectTrigger className="bg-white">
            <SelectValue placeholder="Select language" />
          </SelectTrigger>
          <SelectContent>
            {Languages.map((lang) => (
              <SelectItem key={lang.code} value={lang.code}>{lang.name}</SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      {/* Template Selection */}
      <div>
        <TemplateSelector onTemplateChange={setTemplate} selectedTemplate={template} />
      </div>

      {/* Footer Text */}
      <div>
        <Label htmlFor="footerText" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed">
          Footer Text
        </Label>
        <Textarea
          id="footerText"
          placeholder="Enter footer text"
          value={footerText}
          onChange={(e) => setFooterText(e.target.value)}
        />
      </div>

      {/* Submit Button */}
      <Button disabled={isGenerating} className="w-full bg-blue-500 hover:bg-blue-700 text-white font-semibold py-3 rounded">
        Generate Professional Contract
      </Button>
    </form>
  );
};
