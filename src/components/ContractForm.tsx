
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent } from '@/components/ui/card';
import { Loader2, Sparkles } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ContractFormProps {
  onGenerate: (contract: string) => void;
  onGenerating: (generating: boolean) => void;
  onContractData: (data: any) => void;
  isGenerating: boolean;
}

export const ContractForm = ({ onGenerate, onGenerating, onContractData, isGenerating }: ContractFormProps) => {
  const [formData, setFormData] = useState({
    contractType: '',
    party1Name: '',
    party1Role: '',
    party2Name: '',
    party2Role: '',
    paymentAmount: '',
    paymentTerms: '',
    duration: '',
    scope: '',
    additionalTerms: ''
  });

  const { toast } = useToast();

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const generateContract = async () => {
    if (!formData.contractType || !formData.party1Name || !formData.party2Name) {
      toast({
        title: "Missing Information",
        description: "Please fill in at least the contract type and party names.",
        variant: "destructive"
      });
      return;
    }

    onGenerating(true);
    onContractData(formData);

    try {
      // Simulate API call - In real implementation, this would call OpenAI API
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      const contract = generateMockContract(formData);
      onGenerate(contract);
      
      toast({
        title: "Contract Generated!",
        description: "Your contract has been successfully generated.",
      });
    } catch (error) {
      toast({
        title: "Generation Failed",
        description: "Failed to generate contract. Please try again.",
        variant: "destructive"
      });
    } finally {
      onGenerating(false);
    }
  };

  const generateMockContract = (data: any) => {
    return `
CONTRACT AGREEMENT

This agreement is entered into between ${data.party1Name} (${data.party1Role}) and ${data.party2Name} (${data.party2Role}).

CONTRACT TYPE: ${data.contractType}

TERMS AND CONDITIONS:

1. SCOPE OF WORK
${data.scope || 'The scope of work will be defined as mutually agreed upon by both parties.'}

2. PAYMENT TERMS
${data.paymentAmount ? `Payment Amount: $${data.paymentAmount}` : 'Payment terms to be negotiated.'}
${data.paymentTerms || 'Payment schedule and terms as agreed upon by both parties.'}

3. DURATION
${data.duration || 'Duration of this agreement to be determined by mutual consent.'}

4. ADDITIONAL TERMS
${data.additionalTerms || 'Additional terms and conditions may be added as needed.'}

5. GOVERNING LAW
This agreement shall be governed by the laws of the applicable jurisdiction.

6. SIGNATURES
By signing below, both parties agree to the terms and conditions outlined in this contract.

Party 1: ${data.party1Name} _________________________ Date: _________

Party 2: ${data.party2Name} _________________________ Date: _________


Generated by GenContract AI - Please review with legal counsel before execution.
    `.trim();
  };

  return (
    <div className="space-y-6">
      {/* Contract Type Selection */}
      <Card className="border-blue-100 bg-blue-50/30">
        <CardContent className="p-4">
          <Label className="text-base font-semibold text-gray-900 mb-3 block">
            Contract Type *
          </Label>
          <Select value={formData.contractType} onValueChange={(value) => handleInputChange('contractType', value)}>
            <SelectTrigger className="bg-white">
              <SelectValue placeholder="Select contract type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="nda">Non-Disclosure Agreement (NDA)</SelectItem>
              <SelectItem value="freelance">Freelance/Service Agreement</SelectItem>
              <SelectItem value="rental">Rental Agreement</SelectItem>
              <SelectItem value="employment">Employment Contract</SelectItem>
              <SelectItem value="partnership">Partnership Agreement</SelectItem>
            </SelectContent>
          </Select>
        </CardContent>
      </Card>

      {/* Party Information */}
      <div className="grid md:grid-cols-2 gap-4">
        <Card>
          <CardContent className="p-4">
            <Label className="font-semibold text-gray-900 mb-2 block">Party 1 *</Label>
            <div className="space-y-3">
              <Input
                placeholder="Full Name"
                value={formData.party1Name}
                onChange={(e) => handleInputChange('party1Name', e.target.value)}
                className="bg-white"
              />
              <Input
                placeholder="Role/Title"
                value={formData.party1Role}
                onChange={(e) => handleInputChange('party1Role', e.target.value)}
                className="bg-white"
              />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <Label className="font-semibold text-gray-900 mb-2 block">Party 2 *</Label>
            <div className="space-y-3">
              <Input
                placeholder="Full Name"
                value={formData.party2Name}
                onChange={(e) => handleInputChange('party2Name', e.target.value)}
                className="bg-white"
              />
              <Input
                placeholder="Role/Title"
                value={formData.party2Role}
                onChange={(e) => handleInputChange('party2Role', e.target.value)}
                className="bg-white"
              />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Financial Terms */}
      <Card>
        <CardContent className="p-4">
          <Label className="font-semibold text-gray-900 mb-3 block">Financial Terms</Label>
          <div className="grid md:grid-cols-2 gap-4">
            <div>
              <Label className="text-sm text-gray-600 mb-1 block">Payment Amount</Label>
              <Input
                placeholder="e.g., 5000"
                value={formData.paymentAmount}
                onChange={(e) => handleInputChange('paymentAmount', e.target.value)}
                className="bg-white"
              />
            </div>
            <div>
              <Label className="text-sm text-gray-600 mb-1 block">Payment Terms</Label>
              <Input
                placeholder="e.g., Net 30 days"
                value={formData.paymentTerms}
                onChange={(e) => handleInputChange('paymentTerms', e.target.value)}
                className="bg-white"
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Duration */}
      <Card>
        <CardContent className="p-4">
          <Label className="font-semibold text-gray-900 mb-2 block">Duration</Label>
          <Input
            placeholder="e.g., 6 months, 1 year, ongoing"
            value={formData.duration}
            onChange={(e) => handleInputChange('duration', e.target.value)}
            className="bg-white"
          />
        </CardContent>
      </Card>

      {/* Scope of Work */}
      <Card>
        <CardContent className="p-4">
          <Label className="font-semibold text-gray-900 mb-2 block">Scope of Work</Label>
          <Textarea
            placeholder="Describe the work, services, or subject matter of this contract..."
            value={formData.scope}
            onChange={(e) => handleInputChange('scope', e.target.value)}
            className="bg-white min-h-[100px]"
          />
        </CardContent>
      </Card>

      {/* Additional Terms */}
      <Card>
        <CardContent className="p-4">
          <Label className="font-semibold text-gray-900 mb-2 block">Additional Terms</Label>
          <Textarea
            placeholder="Any additional clauses, terms, or special conditions..."
            value={formData.additionalTerms}
            onChange={(e) => handleInputChange('additionalTerms', e.target.value)}
            className="bg-white min-h-[80px]"
          />
        </CardContent>
      </Card>

      {/* Generate Button */}
      <Button 
        onClick={generateContract}
        disabled={isGenerating}
        className="w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white py-3 text-lg font-semibold shadow-lg"
        size="lg"
      >
        {isGenerating ? (
          <>
            <Loader2 className="mr-2 h-5 w-5 animate-spin" />
            Generating Contract...
          </>
        ) : (
          <>
            <Sparkles className="mr-2 h-5 w-5" />
            Generate Contract
          </>
        )}
      </Button>
    </div>
  );
};
