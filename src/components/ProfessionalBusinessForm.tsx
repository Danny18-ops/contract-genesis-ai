
import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Handshake, Building, DollarSign, Calendar, FileText } from 'lucide-react';

interface ProfessionalBusinessFormProps {
  isOpen: boolean;
  onClose: () => void;
  onContractGenerate: (contractData: any) => void;
}

export const ProfessionalBusinessForm = ({ isOpen, onClose, onContractGenerate }: ProfessionalBusinessFormProps) => {
  const [formData, setFormData] = useState({
    // Party 1 Information (Your Organization)
    party1Name: '',
    party1Address: '',
    party1Email: '',
    party1Phone: '',
    party1Representative: '',
    party1Title: '',
    
    // Party 2 Information (Other Party)
    party2Name: '',
    party2Address: '',
    party2Email: '',
    party2Phone: '',
    party2Representative: '',
    party2Title: '',
    
    // Agreement Details
    agreementType: '',
    businessPurpose: '',
    serviceDescription: '',
    deliverables: '',
    
    // Timeline
    startDate: '',
    endDate: '',
    projectDuration: '',
    milestones: '',
    
    // Financial Terms
    totalValue: '',
    paymentStructure: '',
    paymentTerms: '',
    lateFee: '',
    currency: 'USD',
    
    // Responsibilities
    party1Responsibilities: '',
    party2Responsibilities: '',
    sharedResponsibilities: '',
    
    // Terms & Conditions
    terminationClause: '',
    confidentialityRequired: false,
    intellectualPropertyRights: '',
    disputeResolution: '',
    forceClause: false,
    
    // Compliance & Legal
    governingLaw: '',
    jurisdiction: '',
    complianceRequirements: '',
    
    // Additional Terms
    exclusivityClause: false,
    nonCompeteClause: false,
    renewalTerms: '',
    additionalTerms: ''
  });

  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSubmit = () => {
    const contractData = {
      contractType: 'business',
      template: 'professional',
      organizationData: {
        name: formData.party1Name,
        address: formData.party1Address,
        email: formData.party1Email,
        phone: formData.party1Phone,
        logo: ''
      },
      dynamicFields: {
        ...formData,
        jurisdiction: formData.governingLaw
      },
      language: 'en',
      footerText: 'Generated by GenContract â€” Professional Series'
    };

    onContractGenerate(contractData);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-2xl">
            <Handshake className="w-6 h-6 text-orange-600" />
            Professional Business Agreement
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* Party 1 Information */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Building className="w-5 h-5" />
                Your Organization (Party 1)
              </CardTitle>
            </CardHeader>
            <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="party1Name">Organization Name *</Label>
                <Input
                  id="party1Name"
                  value={formData.party1Name}
                  onChange={(e) => handleInputChange('party1Name', e.target.value)}
                  placeholder="Your Company LLC"
                />
              </div>
              <div>
                <Label htmlFor="party1Representative">Authorized Representative *</Label>
                <Input
                  id="party1Representative"
                  value={formData.party1Representative}
                  onChange={(e) => handleInputChange('party1Representative', e.target.value)}
                  placeholder="John Smith"
                />
              </div>
              <div>
                <Label htmlFor="party1Title">Representative Title *</Label>
                <Input
                  id="party1Title"
                  value={formData.party1Title}
                  onChange={(e) => handleInputChange('party1Title', e.target.value)}
                  placeholder="CEO"
                />
              </div>
              <div>
                <Label htmlFor="party1Phone">Phone Number *</Label>
                <Input
                  id="party1Phone"
                  value={formData.party1Phone}
                  onChange={(e) => handleInputChange('party1Phone', e.target.value)}
                  placeholder="(555) 123-4567"
                />
              </div>
              <div className="md:col-span-2">
                <Label htmlFor="party1Address">Address *</Label>
                <Input
                  id="party1Address"
                  value={formData.party1Address}
                  onChange={(e) => handleInputChange('party1Address', e.target.value)}
                  placeholder="123 Business St, City, State 12345"
                />
              </div>
              <div>
                <Label htmlFor="party1Email">Email Address *</Label>
                <Input
                  id="party1Email"
                  type="email"
                  value={formData.party1Email}
                  onChange={(e) => handleInputChange('party1Email', e.target.value)}
                  placeholder="contact@yourcompany.com"
                />
              </div>
            </CardContent>
          </Card>

          {/* Party 2 Information */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Building className="w-5 h-5" />
                Partner/Client Organization (Party 2)
              </CardTitle>
            </CardHeader>
            <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="party2Name">Organization Name *</Label>
                <Input
                  id="party2Name"
                  value={formData.party2Name}
                  onChange={(e) => handleInputChange('party2Name', e.target.value)}
                  placeholder="Partner Company Inc"
                />
              </div>
              <div>
                <Label htmlFor="party2Representative">Authorized Representative *</Label>
                <Input
                  id="party2Representative"
                  value={formData.party2Representative}
                  onChange={(e) => handleInputChange('party2Representative', e.target.value)}
                  placeholder="Jane Doe"
                />
              </div>
              <div>
                <Label htmlFor="party2Title">Representative Title *</Label>
                <Input
                  id="party2Title"
                  value={formData.party2Title}
                  onChange={(e) => handleInputChange('party2Title', e.target.value)}
                  placeholder="Director"
                />
              </div>
              <div>
                <Label htmlFor="party2Phone">Phone Number *</Label>
                <Input
                  id="party2Phone"
                  value={formData.party2Phone}
                  onChange={(e) => handleInputChange('party2Phone', e.target.value)}
                  placeholder="(555) 987-6543"
                />
              </div>
              <div className="md:col-span-2">
                <Label htmlFor="party2Address">Address *</Label>
                <Input
                  id="party2Address"
                  value={formData.party2Address}
                  onChange={(e) => handleInputChange('party2Address', e.target.value)}
                  placeholder="456 Partner Ave, City, State 12345"
                />
              </div>
              <div>
                <Label htmlFor="party2Email">Email Address *</Label>
                <Input
                  id="party2Email"
                  type="email"
                  value={formData.party2Email}
                  onChange={(e) => handleInputChange('party2Email', e.target.value)}
                  placeholder="contact@partnercompany.com"
                />
              </div>
            </CardContent>
          </Card>

          {/* Agreement Details */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="w-5 h-5" />
                Agreement Details
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="agreementType">Agreement Type *</Label>
                  <Select value={formData.agreementType} onValueChange={(value) => handleInputChange('agreementType', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select agreement type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="service">Service Agreement</SelectItem>
                      <SelectItem value="partnership">Partnership Agreement</SelectItem>
                      <SelectItem value="supply">Supply Agreement</SelectItem>
                      <SelectItem value="distribution">Distribution Agreement</SelectItem>
                      <SelectItem value="consulting">Consulting Agreement</SelectItem>
                      <SelectItem value="joint-venture">Joint Venture</SelectItem>
                      <SelectItem value="licensing">Licensing Agreement</SelectItem>
                      <SelectItem value="other">Other</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="projectDuration">Project Duration</Label>
                  <Input
                    id="projectDuration"
                    value={formData.projectDuration}
                    onChange={(e) => handleInputChange('projectDuration', e.target.value)}
                    placeholder="6 months"
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="businessPurpose">Business Purpose *</Label>
                <Textarea
                  id="businessPurpose"
                  value={formData.businessPurpose}
                  onChange={(e) => handleInputChange('businessPurpose', e.target.value)}
                  placeholder="Strategic partnership for technology development and market expansion..."
                  rows={3}
                />
              </div>

              <div>
                <Label htmlFor="serviceDescription">Service/Product Description *</Label>
                <Textarea
                  id="serviceDescription"
                  value={formData.serviceDescription}
                  onChange={(e) => handleInputChange('serviceDescription', e.target.value)}
                  placeholder="Detailed description of services or products to be provided..."
                  rows={3}
                />
              </div>

              <div>
                <Label htmlFor="deliverables">Key Deliverables</Label>
                <Textarea
                  id="deliverables"
                  value={formData.deliverables}
                  onChange={(e) => handleInputChange('deliverables', e.target.value)}
                  placeholder="â€¢ Deliverable 1&#10;â€¢ Deliverable 2&#10;â€¢ Deliverable 3"
                  rows={4}
                />
              </div>
            </CardContent>
          </Card>

          {/* Timeline */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Calendar className="w-5 h-5" />
                Timeline & Milestones
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="startDate">Start Date *</Label>
                  <Input
                    id="startDate"
                    type="date"
                    value={formData.startDate}
                    onChange={(e) => handleInputChange('startDate', e.target.value)}
                  />
                </div>
                <div>
                  <Label htmlFor="endDate">End Date</Label>
                  <Input
                    id="endDate"
                    type="date"
                    value={formData.endDate}
                    onChange={(e) => handleInputChange('endDate', e.target.value)}
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="milestones">Project Milestones</Label>
                <Textarea
                  id="milestones"
                  value={formData.milestones}
                  onChange={(e) => handleInputChange('milestones', e.target.value)}
                  placeholder="â€¢ Phase 1: Project initiation (Month 1)&#10;â€¢ Phase 2: Development (Months 2-4)&#10;â€¢ Phase 3: Testing and delivery (Months 5-6)"
                  rows={4}
                />
              </div>
            </CardContent>
          </Card>

          {/* Financial Terms */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <DollarSign className="w-5 h-5" />
                Financial Terms
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="totalValue">Total Contract Value</Label>
                  <Input
                    id="totalValue"
                    value={formData.totalValue}
                    onChange={(e) => handleInputChange('totalValue', e.target.value)}
                    placeholder="100000"
                  />
                </div>
                <div>
                  <Label htmlFor="currency">Currency</Label>
                  <Select value={formData.currency} onValueChange={(value) => handleInputChange('currency', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select currency" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="USD">USD - US Dollar</SelectItem>
                      <SelectItem value="EUR">EUR - Euro</SelectItem>
                      <SelectItem value="GBP">GBP - British Pound</SelectItem>
                      <SelectItem value="CAD">CAD - Canadian Dollar</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="paymentStructure">Payment Structure</Label>
                  <Select value={formData.paymentStructure} onValueChange={(value) => handleInputChange('paymentStructure', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select payment structure" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="lump-sum">Lump Sum</SelectItem>
                      <SelectItem value="milestone-based">Milestone Based</SelectItem>
                      <SelectItem value="monthly">Monthly Payments</SelectItem>
                      <SelectItem value="quarterly">Quarterly Payments</SelectItem>
                      <SelectItem value="retainer">Retainer + Usage</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="lateFee">Late Payment Fee (%)</Label>
                  <Input
                    id="lateFee"
                    value={formData.lateFee}
                    onChange={(e) => handleInputChange('lateFee', e.target.value)}
                    placeholder="1.5"
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="paymentTerms">Payment Terms & Schedule</Label>
                <Textarea
                  id="paymentTerms"
                  value={formData.paymentTerms}
                  onChange={(e) => handleInputChange('paymentTerms', e.target.value)}
                  placeholder="Net 30 days from invoice date. Payment schedule details..."
                  rows={3}
                />
              </div>
            </CardContent>
          </Card>

          {/* Responsibilities */}
          <Card>
            <CardHeader>
              <CardTitle>Responsibilities & Obligations</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="party1Responsibilities">Your Organization Responsibilities</Label>
                <Textarea
                  id="party1Responsibilities"
                  value={formData.party1Responsibilities}
                  onChange={(e) => handleInputChange('party1Responsibilities', e.target.value)}
                  placeholder="â€¢ Responsibility 1&#10;â€¢ Responsibility 2&#10;â€¢ Responsibility 3"
                  rows={4}
                />
              </div>

              <div>
                <Label htmlFor="party2Responsibilities">Partner Organization Responsibilities</Label>
                <Textarea
                  id="party2Responsibilities"
                  value={formData.party2Responsibilities}
                  onChange={(e) => handleInputChange('party2Responsibilities', e.target.value)}
                  placeholder="â€¢ Responsibility 1&#10;â€¢ Responsibility 2&#10;â€¢ Responsibility 3"
                  rows={4}
                />
              </div>

              <div>
                <Label htmlFor="sharedResponsibilities">Shared Responsibilities</Label>
                <Textarea
                  id="sharedResponsibilities"
                  value={formData.sharedResponsibilities}
                  onChange={(e) => handleInputChange('sharedResponsibilities', e.target.value)}
                  placeholder="â€¢ Joint responsibility 1&#10;â€¢ Joint responsibility 2"
                  rows={3}
                />
              </div>
            </CardContent>
          </Card>

          {/* Legal Terms */}
          <Card>
            <CardHeader>
              <CardTitle>Legal Terms & Conditions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="governingLaw">Governing Law *</Label>
                  <Input
                    id="governingLaw"
                    value={formData.governingLaw}
                    onChange={(e) => handleInputChange('governingLaw', e.target.value)}
                    placeholder="State of California"
                  />
                </div>
                <div>
                  <Label htmlFor="jurisdiction">Jurisdiction *</Label>
                  <Input
                    id="jurisdiction"
                    value={formData.jurisdiction}
                    onChange={(e) => handleInputChange('jurisdiction', e.target.value)}
                    placeholder="California State Courts"
                  />
                </div>
              </div>

              <div className="space-y-3">
                <div className="flex items-center space-x-2">
                  <Checkbox
                    checked={formData.confidentialityRequired}
                    onCheckedChange={(checked) => handleInputChange('confidentialityRequired', checked)}
                  />
                  <Label>Confidentiality Agreement Required</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox
                    checked={formData.exclusivityClause}
                    onCheckedChange={(checked) => handleInputChange('exclusivityClause', checked)}
                  />
                  <Label>Exclusivity Clause</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox
                    checked={formData.nonCompeteClause}
                    onCheckedChange={(checked) => handleInputChange('nonCompeteClause', checked)}
                  />
                  <Label>Non-Compete Clause</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox
                    checked={formData.forceClause}
                    onCheckedChange={(checked) => handleInputChange('forceClause', checked)}
                  />
                  <Label>Force Majeure Clause</Label>
                </div>
              </div>

              <div>
                <Label htmlFor="disputeResolution">Dispute Resolution</Label>
                <Textarea
                  id="disputeResolution"
                  value={formData.disputeResolution}
                  onChange={(e) => handleInputChange('disputeResolution', e.target.value)}
                  placeholder="Mediation followed by binding arbitration if necessary..."
                  rows={2}
                />
              </div>

              <div>
                <Label htmlFor="terminationClause">Termination Clause</Label>
                <Textarea
                  id="terminationClause"
                  value={formData.terminationClause}
                  onChange={(e) => handleInputChange('terminationClause', e.target.value)}
                  placeholder="Either party may terminate with 30 days written notice..."
                  rows={2}
                />
              </div>

              <div>
                <Label htmlFor="intellectualPropertyRights">Intellectual Property Rights</Label>
                <Textarea
                  id="intellectualPropertyRights"
                  value={formData.intellectualPropertyRights}
                  onChange={(e) => handleInputChange('intellectualPropertyRights', e.target.value)}
                  placeholder="All intellectual property rights and ownership details..."
                  rows={3}
                />
              </div>

              <div>
                <Label htmlFor="additionalTerms">Additional Terms & Conditions</Label>
                <Textarea
                  id="additionalTerms"
                  value={formData.additionalTerms}
                  onChange={(e) => handleInputChange('additionalTerms', e.target.value)}
                  placeholder="Any additional terms, clauses, or special conditions..."
                  rows={4}
                />
              </div>
            </CardContent>
          </Card>

          {/* Action Buttons */}
          <div className="flex gap-4 pt-4">
            <Button onClick={onClose} variant="outline" className="flex-1">
              Cancel
            </Button>
            <Button onClick={handleSubmit} className="flex-1 bg-orange-600 hover:bg-orange-700">
              Generate Business Agreement
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};
