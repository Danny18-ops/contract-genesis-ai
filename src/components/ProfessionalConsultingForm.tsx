
import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Award, User, DollarSign, Calendar, FileText } from 'lucide-react';

interface ProfessionalConsultingFormProps {
  isOpen: boolean;
  onClose: () => void;
  onContractGenerate: (contractData: any) => void;
}

export const ProfessionalConsultingForm = ({ isOpen, onClose, onContractGenerate }: ProfessionalConsultingFormProps) => {
  const [formData, setFormData] = useState({
    // Client Information
    clientName: '',
    clientAddress: '',
    clientEmail: '',
    clientPhone: '',
    clientContact: '',
    clientTitle: '',
    
    // Consultant Information
    consultantName: '',
    consultantAddress: '',
    consultantEmail: '',
    consultantPhone: '',
    consultantTitle: '',
    consultingCompany: '',
    
    // Project Details
    projectTitle: '',
    consultingServices: '',
    projectScope: '',
    deliverables: '',
    successMetrics: '',
    
    // Timeline
    startDate: '',
    endDate: '',
    projectDuration: '',
    milestones: '',
    meetingSchedule: '',
    
    // Compensation
    rateStructure: '',
    hourlyRate: '',
    fixedFee: '',
    retainerAmount: '',
    expensesIncluded: false,
    expensePolicy: '',
    
    // Payment Terms
    paymentSchedule: '',
    invoiceFrequency: '',
    paymentTerms: '',
    lateFee: '',
    
    // Work Arrangements
    workLocation: '',
    communicationMethods: '',
    reportingStructure: '',
    clientResources: '',
    
    // Intellectual Property & Legal
    workForHire: false,
    confidentialityRequired: true,
    nonCompeteRequired: false,
    indemnificationClause: false,
    limitationOfLiability: '',
    
    // Termination & Legal
    terminationClause: '',
    noticeRequired: '',
    finalReportRequired: false,
    governingLaw: '',
    disputeResolution: '',
    
    // Additional Terms
    additionalTerms: '',
    specialConditions: ''
  });

  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSubmit = () => {
    const contractData = {
      contractType: 'consulting',
      template: 'professional',
      organizationData: {
        name: formData.consultingCompany || formData.consultantName,
        address: formData.consultantAddress,
        email: formData.consultantEmail,
        phone: formData.consultantPhone,
        logo: ''
      },
      dynamicFields: {
        ...formData,
        jurisdiction: formData.governingLaw
      },
      language: 'en',
      footerText: 'Generated by GenContract â€” Professional Series'
    };

    onContractGenerate(contractData);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-2xl">
            <Award className="w-6 h-6 text-cyan-600" />
            Professional Consulting Agreement
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* Client Information */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <User className="w-5 h-5" />
                Client Information
              </CardTitle>
            </CardHeader>
            <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="clientName">Client/Company Name *</Label>
                <Input
                  id="clientName"
                  value={formData.clientName}
                  onChange={(e) => handleInputChange('clientName', e.target.value)}
                  placeholder="ABC Corporation"
                />
              </div>
              <div>
                <Label htmlFor="clientContact">Primary Contact *</Label>
                <Input
                  id="clientContact"
                  value={formData.clientContact}
                  onChange={(e) => handleInputChange('clientContact', e.target.value)}
                  placeholder="John Smith"
                />
              </div>
              <div>
                <Label htmlFor="clientTitle">Contact Title *</Label>
                <Input
                  id="clientTitle"
                  value={formData.clientTitle}
                  onChange={(e) => handleInputChange('clientTitle', e.target.value)}
                  placeholder="Project Manager"
                />
              </div>
              <div>
                <Label htmlFor="clientPhone">Client Phone *</Label>
                <Input
                  id="clientPhone"
                  value={formData.clientPhone}
                  onChange={(e) => handleInputChange('clientPhone', e.target.value)}
                  placeholder="(555) 123-4567"
                />
              </div>
              <div className="md:col-span-2">
                <Label htmlFor="clientAddress">Client Address *</Label>
                <Input
                  id="clientAddress"
                  value={formData.clientAddress}
                  onChange={(e) => handleInputChange('clientAddress', e.target.value)}
                  placeholder="123 Business St, City, State 12345"
                />
              </div>
              <div>
                <Label htmlFor="clientEmail">Client Email *</Label>
                <Input
                  id="clientEmail"
                  type="email"
                  value={formData.clientEmail}
                  onChange={(e) => handleInputChange('clientEmail', e.target.value)}
                  placeholder="contact@abccorp.com"
                />
              </div>
            </CardContent>
          </Card>

          {/* Consultant Information */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Award className="w-5 h-5" />
                Consultant Information
              </CardTitle>
            </CardHeader>
            <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="consultantName">Consultant Name *</Label>
                <Input
                  id="consultantName"
                  value={formData.consultantName}
                  onChange={(e) => handleInputChange('consultantName', e.target.value)}
                  placeholder="Jane Doe"
                />
              </div>
              <div>
                <Label htmlFor="consultingCompany">Consulting Company</Label>
                <Input
                  id="consultingCompany"
                  value={formData.consultingCompany}
                  onChange={(e) => handleInputChange('consultingCompany', e.target.value)}
                  placeholder="Strategic Consulting LLC"
                />
              </div>
              <div>
                <Label htmlFor="consultantTitle">Professional Title *</Label>
                <Input
                  id="consultantTitle"
                  value={formData.consultantTitle}
                  onChange={(e) => handleInputChange('consultantTitle', e.target.value)}
                  placeholder="Senior Business Consultant"
                />
              </div>
              <div>
                <Label htmlFor="consultantPhone">Consultant Phone *</Label>
                <Input
                  id="consultantPhone"
                  value={formData.consultantPhone}
                  onChange={(e) => handleInputChange('consultantPhone', e.target.value)}
                  placeholder="(555) 987-6543"
                />
              </div>
              <div className="md:col-span-2">
                <Label htmlFor="consultantAddress">Consultant Address *</Label>
                <Input
                  id="consultantAddress"
                  value={formData.consultantAddress}
                  onChange={(e) => handleInputChange('consultantAddress', e.target.value)}
                  placeholder="456 Consultant Ave, City, State 12345"
                />
              </div>
              <div>
                <Label htmlFor="consultantEmail">Consultant Email *</Label>
                <Input
                  id="consultantEmail"
                  type="email"
                  value={formData.consultantEmail}
                  onChange={(e) => handleInputChange('consultantEmail', e.target.value)}
                  placeholder="jane@strategicconsulting.com"
                />
              </div>
            </CardContent>
          </Card>

          {/* Project Details */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="w-5 h-5" />
                Project Details & Scope
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="projectTitle">Project Title *</Label>
                <Input
                  id="projectTitle"
                  value={formData.projectTitle}
                  onChange={(e) => handleInputChange('projectTitle', e.target.value)}
                  placeholder="Business Process Optimization Consulting"
                />
              </div>

              <div>
                <Label htmlFor="consultingServices">Consulting Services Description *</Label>
                <Textarea
                  id="consultingServices"
                  value={formData.consultingServices}
                  onChange={(e) => handleInputChange('consultingServices', e.target.value)}
                  placeholder="Detailed description of consulting services to be provided..."
                  rows={3}
                />
              </div>

              <div>
                <Label htmlFor="projectScope">Project Scope *</Label>
                <Textarea
                  id="projectScope"
                  value={formData.projectScope}
                  onChange={(e) => handleInputChange('projectScope', e.target.value)}
                  placeholder="Define the boundaries and extent of the consulting engagement..."
                  rows={4}
                />
              </div>

              <div>
                <Label htmlFor="deliverables">Key Deliverables *</Label>
                <Textarea
                  id="deliverables"
                  value={formData.deliverables}
                  onChange={(e) => handleInputChange('deliverables', e.target.value)}
                  placeholder="â€¢ Strategic assessment report&#10;â€¢ Process improvement recommendations&#10;â€¢ Implementation roadmap&#10;â€¢ Final presentation"
                  rows={4}
                />
              </div>

              <div>
                <Label htmlFor="successMetrics">Success Metrics & KPIs</Label>
                <Textarea
                  id="successMetrics"
                  value={formData.successMetrics}
                  onChange={(e) => handleInputChange('successMetrics', e.target.value)}
                  placeholder="Define how success will be measured..."
                  rows={3}
                />
              </div>
            </CardContent>
          </Card>

          {/* Timeline */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Calendar className="w-5 h-5" />
                Timeline & Schedule
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="startDate">Project Start Date *</Label>
                  <Input
                    id="startDate"
                    type="date"
                    value={formData.startDate}
                    onChange={(e) => handleInputChange('startDate', e.target.value)}
                  />
                </div>
                <div>
                  <Label htmlFor="endDate">Project End Date</Label>
                  <Input
                    id="endDate"
                    type="date"
                    value={formData.endDate}
                    onChange={(e) => handleInputChange('endDate', e.target.value)}
                  />
                </div>
                <div>
                  <Label htmlFor="projectDuration">Estimated Duration</Label>
                  <Input
                    id="projectDuration"
                    value={formData.projectDuration}
                    onChange={(e) => handleInputChange('projectDuration', e.target.value)}
                    placeholder="3 months"
                  />
                </div>
                <div>
                  <Label htmlFor="meetingSchedule">Meeting Schedule</Label>
                  <Input
                    id="meetingSchedule"
                    value={formData.meetingSchedule}
                    onChange={(e) => handleInputChange('meetingSchedule', e.target.value)}
                    placeholder="Weekly status calls, bi-weekly reviews"
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="milestones">Project Milestones</Label>
                <Textarea
                  id="milestones"
                  value={formData.milestones}
                  onChange={(e) => handleInputChange('milestones', e.target.value)}
                  placeholder="â€¢ Phase 1: Discovery and analysis (Month 1)&#10;â€¢ Phase 2: Strategy development (Month 2)&#10;â€¢ Phase 3: Implementation planning (Month 3)"
                  rows={4}
                />
              </div>
            </CardContent>
          </Card>

          {/* Compensation */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <DollarSign className="w-5 h-5" />
                Compensation & Payment
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="rateStructure">Rate Structure *</Label>
                  <Select value={formData.rateStructure} onValueChange={(value) => handleInputChange('rateStructure', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select rate structure" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="hourly">Hourly Rate</SelectItem>
                      <SelectItem value="fixed">Fixed Fee</SelectItem>
                      <SelectItem value="retainer">Retainer + Hourly</SelectItem>
                      <SelectItem value="milestone">Milestone-Based</SelectItem>
                      <SelectItem value="value-based">Value-Based</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="hourlyRate">Hourly Rate (if applicable)</Label>
                  <Input
                    id="hourlyRate"
                    value={formData.hourlyRate}
                    onChange={(e) => handleInputChange('hourlyRate', e.target.value)}
                    placeholder="150"
                  />
                </div>
                <div>
                  <Label htmlFor="fixedFee">Fixed Fee (if applicable)</Label>
                  <Input
                    id="fixedFee"
                    value={formData.fixedFee}
                    onChange={(e) => handleInputChange('fixedFee', e.target.value)}
                    placeholder="25000"
                  />
                </div>
                <div>
                  <Label htmlFor="retainerAmount">Retainer Amount (if applicable)</Label>
                  <Input
                    id="retainerAmount"
                    value={formData.retainerAmount}
                    onChange={(e) => handleInputChange('retainerAmount', e.target.value)}
                    placeholder="5000"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <div className="flex items-center space-x-2">
                  <Checkbox
                    checked={formData.expensesIncluded}
                    onCheckedChange={(checked) => handleInputChange('expensesIncluded', checked)}
                  />
                  <Label>Expenses Included in Rate</Label>
                </div>
              </div>

              {!formData.expensesIncluded && (
                <div>
                  <Label htmlFor="expensePolicy">Expense Reimbursement Policy</Label>
                  <Textarea
                    id="expensePolicy"
                    value={formData.expensePolicy}
                    onChange={(e) => handleInputChange('expensePolicy', e.target.value)}
                    placeholder="Travel, accommodation, and other pre-approved expenses will be reimbursed at cost..."
                    rows={3}
                  />
                </div>
              )}

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="invoiceFrequency">Invoice Frequency</Label>
                  <Select value={formData.invoiceFrequency} onValueChange={(value) => handleInputChange('invoiceFrequency', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select frequency" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="weekly">Weekly</SelectItem>
                      <SelectItem value="bi-weekly">Bi-weekly</SelectItem>
                      <SelectItem value="monthly">Monthly</SelectItem>
                      <SelectItem value="milestone">Upon Milestones</SelectItem>
                      <SelectItem value="completion">Upon Completion</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="paymentTerms">Payment Terms</Label>
                  <Select value={formData.paymentTerms} onValueChange={(value) => handleInputChange('paymentTerms', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select payment terms" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="net-15">Net 15 days</SelectItem>
                      <SelectItem value="net-30">Net 30 days</SelectItem>
                      <SelectItem value="net-45">Net 45 days</SelectItem>
                      <SelectItem value="due-on-receipt">Due on Receipt</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div>
                <Label htmlFor="lateFee">Late Payment Fee (%)</Label>
                <Input
                  id="lateFee"
                  value={formData.lateFee}
                  onChange={(e) => handleInputChange('lateFee', e.target.value)}
                  placeholder="1.5"
                />
              </div>
            </CardContent>
          </Card>

          {/* Work Arrangements */}
          <Card>
            <CardHeader>
              <CardTitle>Work Arrangements & Communication</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="workLocation">Work Location</Label>
                  <Select value={formData.workLocation} onValueChange={(value) => handleInputChange('workLocation', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select work location" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="remote">Remote</SelectItem>
                      <SelectItem value="client-site">Client Site</SelectItem>
                      <SelectItem value="consultant-office">Consultant Office</SelectItem>
                      <SelectItem value="hybrid">Hybrid</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="communicationMethods">Primary Communication Methods</Label>
                  <Input
                    id="communicationMethods"
                    value={formData.communicationMethods}
                    onChange={(e) => handleInputChange('communicationMethods', e.target.value)}
                    placeholder="Email, video calls, phone"
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="reportingStructure">Reporting Structure</Label>
                <Textarea
                  id="reportingStructure"
                  value={formData.reportingStructure}
                  onChange={(e) => handleInputChange('reportingStructure', e.target.value)}
                  placeholder="Who the consultant reports to and frequency of updates..."
                  rows={2}
                />
              </div>

              <div>
                <Label htmlFor="clientResources">Client Resources & Support</Label>
                <Textarea
                  id="clientResources"
                  value={formData.clientResources}
                  onChange={(e) => handleInputChange('clientResources', e.target.value)}
                  placeholder="Resources, access, and support that client will provide..."
                  rows={3}
                />
              </div>
            </CardContent>
          </Card>

          {/* Legal Terms */}
          <Card>
            <CardHeader>
              <CardTitle>Legal Terms & Conditions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <div className="flex items-center space-x-2">
                  <Checkbox
                    checked={formData.workForHire}
                    onCheckedChange={(checked) => handleInputChange('workForHire', checked)}
                  />
                  <Label>Work for Hire Agreement</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox
                    checked={formData.confidentialityRequired}
                    onCheckedChange={(checked) => handleInputChange('confidentialityRequired', checked)}
                  />
                  <Label>Confidentiality Agreement Required</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox
                    checked={formData.nonCompeteRequired}
                    onCheckedChange={(checked) => handleInputChange('nonCompeteRequired', checked)}
                  />
                  <Label>Non-Compete Agreement</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox
                    checked={formData.indemnificationClause}
                    onCheckedChange={(checked) => handleInputChange('indemnificationClause', checked)}
                  />
                  <Label>Indemnification Clause</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox
                    checked={formData.finalReportRequired}
                    onCheckedChange={(checked) => handleInputChange('finalReportRequired', checked)}
                  />
                  <Label>Final Report Required</Label>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="governingLaw">Governing Law *</Label>
                  <Input
                    id="governingLaw"
                    value={formData.governingLaw}
                    onChange={(e) => handleInputChange('governingLaw', e.target.value)}
                    placeholder="State of California"
                  />
                </div>
                <div>
                  <Label htmlFor="noticeRequired">Termination Notice Required</Label>
                  <Input
                    id="noticeRequired"
                    value={formData.noticeRequired}
                    onChange={(e) => handleInputChange('noticeRequired', e.target.value)}
                    placeholder="30 days written notice"
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="limitationOfLiability">Limitation of Liability</Label>
                <Textarea
                  id="limitationOfLiability"
                  value={formData.limitationOfLiability}
                  onChange={(e) => handleInputChange('limitationOfLiability', e.target.value)}
                  placeholder="Consultant's liability shall not exceed the total fees paid..."
                  rows={2}
                />
              </div>

              <div>
                <Label htmlFor="terminationClause">Termination Clause</Label>
                <Textarea
                  id="terminationClause"
                  value={formData.terminationClause}
                  onChange={(e) => handleInputChange('terminationClause', e.target.value)}
                  placeholder="Either party may terminate this agreement with written notice..."
                  rows={3}
                />
              </div>

              <div>
                <Label htmlFor="disputeResolution">Dispute Resolution</Label>
                <Textarea
                  id="disputeResolution"
                  value={formData.disputeResolution}
                  onChange={(e) => handleInputChange('disputeResolution', e.target.value)}
                  placeholder="Disputes will be resolved through mediation, then arbitration if necessary..."
                  rows={2}
                />
              </div>

              <div>
                <Label htmlFor="additionalTerms">Additional Terms & Special Conditions</Label>
                <Textarea
                  id="additionalTerms"
                  value={formData.additionalTerms}
                  onChange={(e) => handleInputChange('additionalTerms', e.target.value)}
                  placeholder="Any additional terms, special conditions, or unique requirements..."
                  rows={4}
                />
              </div>
            </CardContent>
          </Card>

          {/* Action Buttons */}
          <div className="flex gap-4 pt-4">
            <Button onClick={onClose} variant="outline" className="flex-1">
              Cancel
            </Button>
            <Button onClick={handleSubmit} className="flex-1 bg-cyan-600 hover:bg-cyan-700">
              Generate Consulting Agreement
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};
